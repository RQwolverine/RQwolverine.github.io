<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Dreamcatcher</title>
  
  <subtitle>Qualis Ab Incepto</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="www.rqwolverine.com/"/>
  <updated>2019-12-31T00:36:26.574Z</updated>
  <id>www.rqwolverine.com/</id>
  
  <author>
    <name>Wolzeurachqy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Annual Summary 0f 2019</title>
    <link href="www.rqwolverine.com/Annual%20Summary%20of%202019.html"/>
    <id>www.rqwolverine.com/Annual Summary of 2019.html</id>
    <published>2019-12-31T00:19:09.750Z</published>
    <updated>2019-12-31T00:36:26.574Z</updated>
    
    <content type="html"><![CDATA[<h2 id="2019年度总结"><a href="#2019年度总结" class="headerlink" title="2019年度总结"></a>2019年度总结</h2><blockquote><p><em>Created by 张瑞祺, all rights reserved.</em></p></blockquote><hr><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><ul><li>从初一成为岳老的学生，便有了每逢年末一篇年度总结的习惯，坚持到现在，已是第八个年头。而今年，也是第一次在个人网站上、用Markdown语法书写并发布年度总结。纵然期末考试周有太多的压力和任务需要完成，年度总结也是绝不能省略的。</li></ul><hr><h3 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h3><ul><li>去年今日，我正搭乘红眼航班，紧急飞回成都办理新的身份证和护照，目的是为了办理签证，以参加约翰霍普金斯大学在洛杉矶的语言培训，那是第一次参报英才学院的交流项目，不理智也不成熟，未曾想到一番折腾后签证却因被AP而错过了机会。失落和失望弥漫在2019最初的一两个月，曾经笃定的梦想也因此而备受质疑。一年过去了，梦想最终被再次坚定，且前所未有的笃定。</li><li>2019年，于世界格局而言瞬息万变，政治、经济和制度的斗争愈演愈烈。于我而言，堪称20年来成长最快的一年。在大一学年和即将结束的大二秋季学期中，在信息的获取与输出中，在不断的修正和调整中，我最终形成了一套对自己目标、定位、期待的清晰认识。在机不可失和欲速则不达的两者极端中想清楚了自己应该选择的平衡点。</li><li>我所坚持和认可的自我定位，在宏观上体现在今年20岁生日所做的十年之约上，而作于细处，则是对处理诸多事情、决定时更为成熟稳健的认知。如何处理竞争和合作关系，如何处理接入性事件和自我安排，如何调控心理压力，都在逐渐清晰的自我定位中找到了目前最合适的答案。</li><li>于2019年，最有意义的一次旅行&amp;访学便是暑假8月的麻省理工学院访学项目。坦诚地讲，这次访学让我的性格更加开放、大方与自信，这次访学让我真正且正确地认识到究竟什么是自信。我见识了无比优秀的同龄人，挖掘出自己专业以外的特质。第一次出国，第一次出海，Whale Watch把大自然的美好永远刻入了我的记忆里，异域文化带来的冲击和体验新鲜而深刻，这种broaden_my_horizon的感受不再仅仅是出现在英语写作里。</li><li>我的2019，精彩纷呈，斑斓绚烂，这大概是我想到的最合适的8个概括性字眼。这一年带给我的成长和感悟，是前所未有的。这一年，也充满了挫折和打击，下半年初入科研导致的科研学业的长期低迷，让我迫切的需要在新的一年进行revolutionary的自我尝试，见识过黑暗，体会过失望，才知道光明的不容易。而我想说，即使陷入囹圄，也要心向朝阳。</li><li>2019，是不能撤回的。为这一年作最后的打包和封装吧，它将属于记忆，而记忆将永存于心。我的2019，可圈，可点，可珍藏。</li><li>So: <strong>FAREWELL</strong>, Wolzeurachqy’s 2019.</li></ul><hr><h3 id="To-2020"><a href="#To-2020" class="headerlink" title="To 2020"></a>To 2020</h3><ul><li>当一个人展望新的一年时，总是无法避免的立下一个个flag，少数人让flag一直不倒，绝大多数人的flag，被遗弃，被毁弃。在年度总结里，upcoming_year是必须要提到的，flag也是必须要立下的，但我想再认识一次自己。</li><li>请问，2020，对我意味着什么？<ul><li>三场标化考试的决胜期</li><li>GPA的关键一年</li><li>科研成果的期望产出</li><li>身体状况的继续优化</li><li>国际交流的期望实现</li><li>······</li></ul></li><li>透过这些量化的目标，再问一个问题：2021年，对我意味着什么？2021的下半年，是步入大学千余天为之拼搏的信仰期限，是从梦想到现实的底线。那么2020的意义似乎也就不言自明了——<strong>更好，更强</strong>。</li><li>2020，于我而言，所要面对的，是新鲜过后的疲乏，是万米长跑中最为疲倦而艰辛的4000～7000米，也是决定最后三千米起线和爆发力的战略式的里程段。2020的目标不再是尝试，而是底线，因此2020是极具挑战性和压力的一年。在这段最具挑战性的赛程上，我希望自己能够利用好已经开发完备的自动化体系(RQscheme-Automation-System)，让执行力高度耦合计划，让自律和面对孤独的潜力完美绽放。按照我对自己的了解，我想如果我能真正做到问心无愧，我所期望的结果将水到渠成。</li><li><p>女排精神是什么？</p><ul><li><blockquote><p>女排精神不是赢得冠军，而是有时候知道不会赢，也竭尽全力。是你一路虽走得摇摇晃晃，但站起来抖抖身上的尘土，依旧眼中坚定。人生不是一定会赢，而是要努力去赢。</p></blockquote></li><li><blockquote><p>——By 郎平，以此自勉。</p></blockquote></li></ul></li><li><p>2020，我用<strong>“自信，勇敢，率真，勤奋”</strong>这么4个词来勉励自己。</p><ul><li>自信：天生我材必有用，敢撑大厦作栋梁</li><li>勇敢：千磨万击还坚劲，任尔东西南北风</li><li>率真：不为世俗所束缚，不忘初心得始终</li><li>勤奋：宝剑锋从磨砺出，梅花香自苦寒来</li></ul></li><li>最后，愿永葆热爱，<strong>在2020: 云开月明，长风破浪！</strong><blockquote><p><em>没有一个答案来得很简单<br>没有一种灿烂不经历孤单<br>当我的梦依然遥远 当脚下的路仍不平坦<br>我才知道什么是热爱<br>直到两鬓斑白 有多少时光 留我们遗憾<br>但坚持一种坚持永远不晚<br>有一个地方 给我温暖 是我的彼岸<br>那里有我的平凡也有我 终有一天的非凡<br>我将你热爱 风雨中 不曾摇摆<br>你如此存在 让我的心 不再徘徊<br>长路虽漫漫 追梦人从不论成败<br>A Better You ,  A Bigger World</em><br>……</p></blockquote></li></ul><blockquote><p>Go Ahead! 2020.</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;2019年度总结&quot;&gt;&lt;a href=&quot;#2019年度总结&quot; class=&quot;headerlink&quot; title=&quot;2019年度总结&quot;&gt;&lt;/a&gt;2019年度总结&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Created by 张瑞祺, all rights re
      
    
    </summary>
    
      <category term="others" scheme="www.rqwolverine.com/categories/others/"/>
    
    
      <category term="others" scheme="www.rqwolverine.com/tags/others/"/>
    
  </entry>
  
  <entry>
    <title>1st Anniversary</title>
    <link href="www.rqwolverine.com/1st%20Anniversary.html"/>
    <id>www.rqwolverine.com/1st Anniversary.html</id>
    <published>2019-12-20T02:02:35.419Z</published>
    <updated>2019-12-20T02:38:18.575Z</updated>
    
    <content type="html"><![CDATA[<h3 id="回忆"><a href="#回忆" class="headerlink" title="回忆"></a>回忆</h3><ul><li>2018.12.14～2018.12.20，用了7个整天，完成了从0到1的目标。一个并不懂编程语言的我，靠着一种不屈不挠的坚持和互联网上参差不齐的海量资源，在走了无数弯路、向GitHub提交了接近100次代码后，凭借强大的Ctrl C&amp;Ctrl V拼出了一个属于我自己的空间。</li><li>这就不免需要提及为什么会想要搭建一个博客网站。当时真的是出于一种心血来潮，想去尝试一下自己未知却充满好奇的领域，但未曾想过会最终坚持下来。</li></ul><hr><h3 id="如今"><a href="#如今" class="headerlink" title="如今"></a>如今</h3><ul><li>一年后，除了右下角的看板娘小姐姐不知为什么消失了，网站的各个功能都还是在良性运转，当时在GoDaddy上购买的域名也还要两年才会到期。</li><li>一年间，并没有太多的更新，有些比较拙劣的更新也被我抹去，一年间常常打开这个网站，这个网站就像自己的孩子，心里总是不由自主的感到温暖而开心。</li><li>如今，一周年来临，在第135次向GitHub提交代码、部署网站时，将会有以下更新：<ul><li>网站名：由CubicWiscreator变更为Dreamcatcher</li><li>网站副标题：由Scio Me Nihil Scire变更为Qualis Ab Incepto</li><li>网站主创头像：变更为和QQ头像同步</li><li>网站关键词：Life, Experience</li></ul></li></ul><hr><h3 id="未来"><a href="#未来" class="headerlink" title="未来"></a>未来</h3><ul><li>未来的一年，希望能在这方空间发布更多的文章、留下更多的足迹，无论有关学习还是生活。</li><li>We are all in the gutter, but some of us are looking at the stars.跨过山河大海，沿途便是晴天。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;回忆&quot;&gt;&lt;a href=&quot;#回忆&quot; class=&quot;headerlink&quot; title=&quot;回忆&quot;&gt;&lt;/a&gt;回忆&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;2018.12.14～2018.12.20，用了7个整天，完成了从0到1的目标。一个并不懂编程语言的我，靠着一种不屈不挠的坚持和
      
    
    </summary>
    
      <category term="others" scheme="www.rqwolverine.com/categories/others/"/>
    
    
      <category term="others" scheme="www.rqwolverine.com/tags/others/"/>
    
  </entry>
  
  <entry>
    <title>About Machine Learning</title>
    <link href="www.rqwolverine.com/Introduction%20to%20Machine%20Learning.html"/>
    <id>www.rqwolverine.com/Introduction to Machine Learning.html</id>
    <published>2019-11-27T09:25:48.916Z</published>
    <updated>2019-12-20T02:25:45.953Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Academic-definition-of-ML"><a href="#Academic-definition-of-ML" class="headerlink" title="Academic definition of ML"></a>Academic definition of ML</h3><ul><li><h5 id="A-computer-program-is-said-to-learn-from-experience-E-with-respect-to-some-class-of-tasks-T-and-performance-measure-P-if-its-performance-at-tasks-in-T-as-measured-by-P-improves-with-experience-E"><a href="#A-computer-program-is-said-to-learn-from-experience-E-with-respect-to-some-class-of-tasks-T-and-performance-measure-P-if-its-performance-at-tasks-in-T-as-measured-by-P-improves-with-experience-E" class="headerlink" title="A computer program is said to learn from experience E with respect to some class of tasks T and performance measure P if its performance at tasks in T, as measured by P, improves with experience E."></a>A computer program is said to learn from experience E with respect to some class of tasks T and performance measure P if its performance at tasks in T, as measured by P, improves with experience E.</h5></li><li><h5 id="Chinese-verison-对于某类任务-T-和性能度量-P-，如果一个计算机程序在-T-上以-P-衡量的性能随着经验-E-而自我完善，那么我们称这个计算机程序在从经验-E-学习。"><a href="#Chinese-verison-对于某类任务-T-和性能度量-P-，如果一个计算机程序在-T-上以-P-衡量的性能随着经验-E-而自我完善，那么我们称这个计算机程序在从经验-E-学习。" class="headerlink" title="Chinese verison: 对于某类任务 T 和性能度量 P ，如果一个计算机程序在 T 上以 P 衡量的性能随着经验 E 而自我完善，那么我们称这个计算机程序在从经验 E 学习。"></a>Chinese verison: 对于某类任务 T 和性能度量 P ，如果一个计算机程序在 T 上以 P 衡量的性能随着经验 E 而自我完善，那么我们称这个计算机程序在从经验 E 学习。</h5></li><li><h5 id="Simplified-amp-Core-meaning-计算机程序通过累计经验来获得性能的提升。"><a href="#Simplified-amp-Core-meaning-计算机程序通过累计经验来获得性能的提升。" class="headerlink" title="Simplified&amp;Core meaning: 计算机程序通过累计经验来获得性能的提升。"></a>Simplified&amp;Core meaning: 计算机程序通过累计经验来获得性能的提升。</h5></li></ul><hr><h3 id="Relationship-among-ML-DL-AI"><a href="#Relationship-among-ML-DL-AI" class="headerlink" title="Relationship among ML/DL/AI"></a>Relationship among ML/DL/AI</h3><p><img src="https://img-blog.csdnimg.cn/20191127171010644.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQwNTI3MA==,size_16,color_FFFFFF,t_70" alt="一个简单的关系图"></p><hr><h3 id="A-categorization-of-ML"><a href="#A-categorization-of-ML" class="headerlink" title="A categorization of ML"></a>A categorization of ML</h3><h5 id="目前，我们通常所说的「机器学习」大致包含四大类：监督学习，英文为Supervised-Learning；无监督学习，英文为-Unsupervised-Learning；半监督学习，英文为Semi-supervised-Learning；强化学习，英文为Reinforcement-Learning。"><a href="#目前，我们通常所说的「机器学习」大致包含四大类：监督学习，英文为Supervised-Learning；无监督学习，英文为-Unsupervised-Learning；半监督学习，英文为Semi-supervised-Learning；强化学习，英文为Reinforcement-Learning。" class="headerlink" title="目前，我们通常所说的「机器学习」大致包含四大类：监督学习，英文为Supervised Learning；无监督学习，英文为 Unsupervised Learning；半监督学习，英文为Semi-supervised Learning；强化学习，英文为Reinforcement Learning。"></a>目前，我们通常所说的「机器学习」大致包含四大类：监督学习，英文为Supervised Learning；无监督学习，英文为 Unsupervised Learning；半监督学习，英文为Semi-supervised Learning；强化学习，英文为Reinforcement Learning。</h5><hr><h3 id="Detailed-instruction-of-SL-amp-USL"><a href="#Detailed-instruction-of-SL-amp-USL" class="headerlink" title="Detailed instruction of SL &amp; USL"></a>Detailed instruction of SL &amp; USL</h3><h5 id="监督学习"><a href="#监督学习" class="headerlink" title="监督学习"></a>监督学习</h5><ul><li><h5 id="Supervised-learning-is-the-machine-learning-task-of-learning-a-function-that-maps-an-input-to-an-output-based-on-example-input-output-pairs-It-infers-a-function-from-labeled-training-data-consisting-of-a-set-of-training-examples"><a href="#Supervised-learning-is-the-machine-learning-task-of-learning-a-function-that-maps-an-input-to-an-output-based-on-example-input-output-pairs-It-infers-a-function-from-labeled-training-data-consisting-of-a-set-of-training-examples" class="headerlink" title="Supervised learning is the machine learning task of learning a function that maps an input to an output based on example input-output pairs. It infers a function from labeled training data consisting of a set of training examples."></a>Supervised learning is the machine learning task of learning a function that maps an input to an output based on example input-output pairs. It infers a function from labeled training data consisting of a set of training examples.</h5></li><li><h5 id="监督学习是基于示例输入-输出数据对，在输入和输出数据之间建立数学函数的机器学习任务，而该数学函数来源于对有标签训练数据集的学习过程。"><a href="#监督学习是基于示例输入-输出数据对，在输入和输出数据之间建立数学函数的机器学习任务，而该数学函数来源于对有标签训练数据集的学习过程。" class="headerlink" title="监督学习是基于示例输入-输出数据对，在输入和输出数据之间建立数学函数的机器学习任务，而该数学函数来源于对有标签训练数据集的学习过程。"></a>监督学习是基于示例输入-输出数据对，在输入和输出数据之间建立数学函数的机器学习任务，而该数学函数来源于对有标签训练数据集的学习过程。</h5><h5 id="无监督学习"><a href="#无监督学习" class="headerlink" title="无监督学习"></a>无监督学习</h5></li><li><h5 id="无监督学习-是面对无标签数据常常使用的一类机器学习方法，而通常我们用得较多的就是数据聚类。"><a href="#无监督学习-是面对无标签数据常常使用的一类机器学习方法，而通常我们用得较多的就是数据聚类。" class="headerlink" title="无监督学习 是面对无标签数据常常使用的一类机器学习方法，而通常我们用得较多的就是数据聚类。"></a>无监督学习 是面对无标签数据常常使用的一类机器学习方法，而通常我们用得较多的就是数据聚类。</h5></li><li><h5 id="数据聚类，形象的介绍就是把一堆数据按照它们特征的相似度分为多个子类。例如，我们手中有一个花朵数据集，包含有叶片长度和宽度两个特征。我们可以根据这两个特征将其在二维平面中可视化。"><a href="#数据聚类，形象的介绍就是把一堆数据按照它们特征的相似度分为多个子类。例如，我们手中有一个花朵数据集，包含有叶片长度和宽度两个特征。我们可以根据这两个特征将其在二维平面中可视化。" class="headerlink" title="数据聚类，形象的介绍就是把一堆数据按照它们特征的相似度分为多个子类。例如，我们手中有一个花朵数据集，包含有叶片长度和宽度两个特征。我们可以根据这两个特征将其在二维平面中可视化。"></a>数据聚类，形象的介绍就是把一堆数据按照它们特征的相似度分为多个子类。例如，我们手中有一个花朵数据集，包含有叶片长度和宽度两个特征。我们可以根据这两个特征将其在二维平面中可视化。</h5></li></ul><hr><h3 id="General-process-of-ML"><a href="#General-process-of-ML" class="headerlink" title="General process of ML"></a>General process of ML</h3><p><img src="https://img-blog.csdnimg.cn/20191127171832498.png" alt="机器学习普遍流程"></p><h5 id="All-done"><a href="#All-done" class="headerlink" title="All done."></a>All done.</h5>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Academic-definition-of-ML&quot;&gt;&lt;a href=&quot;#Academic-definition-of-ML&quot; class=&quot;headerlink&quot; title=&quot;Academic definition of ML&quot;&gt;&lt;/a&gt;Academic de
      
    
    </summary>
    
      <category term="Machine Learning" scheme="www.rqwolverine.com/categories/Machine-Learning/"/>
    
    
      <category term="Machine Learning" scheme="www.rqwolverine.com/tags/Machine-Learning/"/>
    
  </entry>
  
  <entry>
    <title>十年之约，20岁生日愿望</title>
    <link href="www.rqwolverine.com/%E5%8D%81%E5%B9%B4%E4%B9%8B%E7%BA%A6%EF%BC%8C20%E5%B2%81%E7%94%9F%E6%97%A5%E6%84%BF%E6%9C%9B.html"/>
    <id>www.rqwolverine.com/十年之约，20岁生日愿望.html</id>
    <published>2019-11-16T02:55:07.523Z</published>
    <updated>2019-11-16T02:57:51.123Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Please enter the password to read the blog." />    <label for="pass">Please enter the password to read the blog.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      The article has been encrypted, please enter your password to view.&lt;br&gt;
    
    </summary>
    
      <category term="others" scheme="www.rqwolverine.com/categories/others/"/>
    
    
      <category term="others" scheme="www.rqwolverine.com/tags/others/"/>
    
  </entry>
  
  <entry>
    <title>Encrypt Your Files</title>
    <link href="www.rqwolverine.com/Encrypt%20Your%20Files.html"/>
    <id>www.rqwolverine.com/Encrypt Your Files.html</id>
    <published>2019-06-10T11:53:08.668Z</published>
    <updated>2019-06-24T06:53:50.420Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Encrypt-Your-Files"><a href="#Encrypt-Your-Files" class="headerlink" title="Encrypt Your Files"></a>Encrypt Your Files</h1><hr><h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><h4 id="中国人对知识产权的保护和重视程度是远远不够的。如今虽然Office和WPS都可以对文档执行用户-amp-文档加密，但作为分享文档的话，告诉他人固定密码后该文档也同时失去其加密价值。"><a href="#中国人对知识产权的保护和重视程度是远远不够的。如今虽然Office和WPS都可以对文档执行用户-amp-文档加密，但作为分享文档的话，告诉他人固定密码后该文档也同时失去其加密价值。" class="headerlink" title="中国人对知识产权的保护和重视程度是远远不够的。如今虽然Office和WPS都可以对文档执行用户&amp;文档加密，但作为分享文档的话，告诉他人固定密码后该文档也同时失去其加密价值。"></a>中国人对知识产权的保护和重视程度是远远不够的。如今虽然Office和WPS都可以对文档执行用户&amp;文档加密，但作为分享文档的话，告诉他人固定密码后该文档也同时失去其加密价值。</h4><h4 id="那么有没有一种方式能使得文档在被阅读次数达到限定值后自动销毁的手段呢？"><a href="#那么有没有一种方式能使得文档在被阅读次数达到限定值后自动销毁的手段呢？" class="headerlink" title="那么有没有一种方式能使得文档在被阅读次数达到限定值后自动销毁的手段呢？"></a>那么有没有一种方式能使得文档在被阅读次数达到限定值后自动销毁的手段呢？</h4><hr><h2 id="Tool"><a href="#Tool" class="headerlink" title="Tool"></a>Tool</h2><h4 id="我们使用一款叫做“X-文件锁”的软件，其安装后由Undmaker和Undviewer两个应用程序构成。"><a href="#我们使用一款叫做“X-文件锁”的软件，其安装后由Undmaker和Undviewer两个应用程序构成。" class="headerlink" title="我们使用一款叫做“X-文件锁”的软件，其安装后由Undmaker和Undviewer两个应用程序构成。"></a>我们使用一款叫做“X-文件锁”的软件，其安装后由Undmaker和Undviewer两个应用程序构成。</h4><h4 id="这是我所分享的该软件下载地址（源文件引自CSDN，亲测可用）："><a href="#这是我所分享的该软件下载地址（源文件引自CSDN，亲测可用）：" class="headerlink" title="这是我所分享的该软件下载地址（源文件引自CSDN，亲测可用）："></a>这是我所分享的该软件下载地址（源文件引自CSDN，亲测可用）：</h4><ul><li><h5 id="链接-https-pan-baidu-com-s-10QPL78PMua3xWuudhy-AoQ-提取码-huxy"><a href="#链接-https-pan-baidu-com-s-10QPL78PMua3xWuudhy-AoQ-提取码-huxy" class="headerlink" title="链接: https://pan.baidu.com/s/10QPL78PMua3xWuudhy-AoQ 提取码: huxy"></a>链接: <a href="https://pan.baidu.com/s/10QPL78PMua3xWuudhy-AoQ" target="_blank" rel="noopener">https://pan.baidu.com/s/10QPL78PMua3xWuudhy-AoQ</a> 提取码: huxy</h5></li><li><h5 id="备注：链接永久有效"><a href="#备注：链接永久有效" class="headerlink" title="备注：链接永久有效"></a>备注：链接永久有效</h5></li></ul><hr><h2 id="How-To-Use"><a href="#How-To-Use" class="headerlink" title="How To Use"></a>How To Use</h2><ul><li><h4 id="STEP-1："><a href="#STEP-1：" class="headerlink" title="STEP 1："></a>STEP 1：</h4><ul><li><h5 id="下载并解压ZIP，按照指示安装并运行"><a href="#下载并解压ZIP，按照指示安装并运行" class="headerlink" title="下载并解压ZIP，按照指示安装并运行"></a>下载并解压ZIP，按照指示安装并运行</h5></li></ul></li><li><h4 id="STEP-2："><a href="#STEP-2：" class="headerlink" title="STEP 2："></a>STEP 2：</h4><ul><li><h5 id="该软件只对OFFICE文档有效，如果你是WPS文档，请转化为OFFICE文档，如下截图所示——"><a href="#该软件只对OFFICE文档有效，如果你是WPS文档，请转化为OFFICE文档，如下截图所示——" class="headerlink" title="该软件只对OFFICE文档有效，如果你是WPS文档，请转化为OFFICE文档，如下截图所示——"></a>该软件只对OFFICE文档有效，如果你是WPS文档，请转化为OFFICE文档，如下截图所示——</h5><img src="https://img-blog.csdnimg.cn/20190610193824123.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQwNTI3MA==,size_16,color_FFFFFF,t_70" alt="WPS转WORD示例"></li></ul></li><li><h4 id="STEP-3："><a href="#STEP-3：" class="headerlink" title="STEP 3："></a>STEP 3：</h4><ul><li><h5 id="启动软件，进行相应设置，并生成文档即可，具体操作如下两图片所示"><a href="#启动软件，进行相应设置，并生成文档即可，具体操作如下两图片所示" class="headerlink" title="启动软件，进行相应设置，并生成文档即可，具体操作如下两图片所示"></a>启动软件，进行相应设置，并生成文档即可，具体操作如下两图片所示</h5></li><li><h5 id="注意：文档传输给对方后，若其想查看同样需要安装该软件，该软件占用内存小，安装也很方便"><a href="#注意：文档传输给对方后，若其想查看同样需要安装该软件，该软件占用内存小，安装也很方便" class="headerlink" title="注意：文档传输给对方后，若其想查看同样需要安装该软件，该软件占用内存小，安装也很方便"></a>注意：文档传输给对方后，若其想查看同样需要安装该软件，该软件占用内存小，安装也很方便</h5><img src="https://img-blog.csdnimg.cn/20190610194900576.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQwNTI3MA==,size_16,color_FFFFFF,t_70" alt="选择待上锁文档"><br><img src="https://img-blog.csdnimg.cn/20190610194957159.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQwNTI3MA==,size_16,color_FFFFFF,t_70" alt="Do It Yourself"></li></ul></li></ul><hr><h2 id="Ending"><a href="#Ending" class="headerlink" title="Ending"></a>Ending</h2><h3 id="大功告成，So-Long"><a href="#大功告成，So-Long" class="headerlink" title="大功告成，So Long~"></a>大功告成，So Long~</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Encrypt-Your-Files&quot;&gt;&lt;a href=&quot;#Encrypt-Your-Files&quot; class=&quot;headerlink&quot; title=&quot;Encrypt Your Files&quot;&gt;&lt;/a&gt;Encrypt Your Files&lt;/h1&gt;&lt;hr&gt;
&lt;h2 
      
    
    </summary>
    
      <category term="others" scheme="www.rqwolverine.com/categories/others/"/>
    
    
      <category term="others" scheme="www.rqwolverine.com/tags/others/"/>
    
  </entry>
  
  <entry>
    <title>第三方服务器接入微信公众号</title>
    <link href="www.rqwolverine.com/%E7%AC%AC%E4%B8%89%E6%96%B9%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%8E%A5%E5%85%A5%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7.html"/>
    <id>www.rqwolverine.com/第三方服务器接入微信公众号.html</id>
    <published>2019-02-19T09:34:03.896Z</published>
    <updated>2019-02-19T10:12:02.622Z</updated>
    
    <content type="html"><![CDATA[<h3 id="第三方服务器接入微信公众号"><a href="#第三方服务器接入微信公众号" class="headerlink" title="第三方服务器接入微信公众号"></a>第三方服务器接入微信公众号</h3><hr><h4 id="一、写在前面："><a href="#一、写在前面：" class="headerlink" title="一、写在前面："></a>一、写在前面：</h4><ul><li>成为微信公众平台运营者，自定义自己的交互界面，是一件自由而愉快的事。然而美好愿景可不能卡在第一关——第三方服务器接入公众号上。本文总结一下基于PHP+SinaAppEngine进行实现接入的方法。</li></ul><hr><h4 id="二、工具及原料介绍："><a href="#二、工具及原料介绍：" class="headerlink" title="二、工具及原料介绍："></a>二、工具及原料介绍：</h4><ul><li><h5 id="1、以个人注册的订阅号（Subscription-Account）"><a href="#1、以个人注册的订阅号（Subscription-Account）" class="headerlink" title="1、以个人注册的订阅号（Subscription Account）"></a>1、以个人注册的订阅号（Subscription Account）</h5></li><li><h5 id="2、个人微博账号"><a href="#2、个人微博账号" class="headerlink" title="2、个人微博账号"></a>2、个人微博账号</h5><ul><li><h6 id="为什么选择新浪sae？"><a href="#为什么选择新浪sae？" class="headerlink" title="为什么选择新浪sae？"></a>为什么选择新浪sae？</h6><ul><li>——百度bae收费，每个月80元+，新浪sae可免费实现接入，所以选择新浪sae</li></ul></li></ul></li></ul><hr><h4 id="三、注册SAE并实名认证"><a href="#三、注册SAE并实名认证" class="headerlink" title="三、注册SAE并实名认证"></a>三、注册SAE并实名认证</h4><ul><li>打开浏览器搜索新浪SAE，登录并如实填写个人信息</li><li>进行实名认证：<ul><li><strong>注1：不实名认证将无法通过Token回传</strong></li><li><strong>注2：实名认证前若账户有＞50元可申请2小时加急验证</strong></li></ul></li></ul><hr><h4 id="四、下载wx-sample-20140819文件"><a href="#四、下载wx-sample-20140819文件" class="headerlink" title="四、下载wx_sample.20140819文件"></a>四、下载wx_sample.20140819文件</h4><ul><li>1、翻查微信公众平台开发者文档（或直接百度该文件名找到下载源）<ul><li>链接如下：<a href="https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1445241432" target="_blank" rel="noopener">微信公众平台开发者文档</a></li></ul></li><li>2、下载wx_sample文件到本地。<strong>注：不要解压缩，不要增删改，会用到</strong></li></ul><hr><h4 id="五、在SAE上进行代码部署"><a href="#五、在SAE上进行代码部署" class="headerlink" title="五、在SAE上进行代码部署"></a>五、在SAE上进行代码部署</h4><ul><li>进入新浪SAE控制台，创建一个应用</li><li>选择：标准运行环境；PHP7.0开发语言；并设置自己应用的名字和二级域名</li><li>创建完成后进入应用，浏览左侧菜单选择“<strong>运行环境管理</strong>”——“<strong>代码管理</strong>”</li><li>点击“<strong>创建新版本</strong>”，将之命名为“<strong>1</strong>”即可</li><li>上传wx_sample.20140819.zip至“<strong>版本1</strong>”中<ul><li><strong>注：此处可在线编辑修改自己的Token值</strong></li></ul></li></ul><p>至此，接口就如所需代码部署完成</p><hr><h4 id="六、进行Token验证"><a href="#六、进行Token验证" class="headerlink" title="六、进行Token验证"></a>六、进行Token验证</h4><ul><li>登录微信公众平台，并进入到“<strong>开发者中心</strong>”</li><li>进行信息填写，具体示例如下——<ul><li><code>服务器地址（URL）：http://1.你的二级域名.applinzi.com/wx_sample.php</code><br><code>令牌（Token）：和你在wx_sample里设置的一样，没改动则默认为“**weixin**”</code><br><code>消息加解密密钥（EncodingAESKey）:可以直接随机生成</code><br><code>消息加解密方式：选择“明文模式”</code></li></ul></li></ul><p>至此，完成在第三方服务器接入微信公众号</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;第三方服务器接入微信公众号&quot;&gt;&lt;a href=&quot;#第三方服务器接入微信公众号&quot; class=&quot;headerlink&quot; title=&quot;第三方服务器接入微信公众号&quot;&gt;&lt;/a&gt;第三方服务器接入微信公众号&lt;/h3&gt;&lt;hr&gt;
&lt;h4 id=&quot;一、写在前面：&quot;&gt;&lt;a href
      
    
    </summary>
    
      <category term="others" scheme="www.rqwolverine.com/categories/others/"/>
    
    
      <category term="others" scheme="www.rqwolverine.com/tags/others/"/>
    
  </entry>
  
  <entry>
    <title>Linux目录结构及文件基本操作</title>
    <link href="www.rqwolverine.com/Linux%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84%E5%8F%8A%E6%96%87%E4%BB%B6%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C.html"/>
    <id>www.rqwolverine.com/Linux目录结构及文件基本操作.html</id>
    <published>2018-12-21T15:59:57.924Z</published>
    <updated>2018-12-21T16:04:21.180Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、Linux目录结构"><a href="#一、Linux目录结构" class="headerlink" title="一、Linux目录结构"></a>一、Linux目录结构</h2><h3 id="A、FHS"><a href="#A、FHS" class="headerlink" title="A、FHS"></a>A、FHS</h3><h4 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a><strong>Introduction</strong></h4><p>FHS（英文：Filesystem Hierarchy Standard 中文：文件系统层次结构标准），多数 Linux 版本采用这种文件组织形式，FHS 定义了系统中每个区域的用途、所需要的最小构成的文件和目录同时还给出了例外处理与矛盾处理。<br>FHS 定义了两层规范，第一层是， / 下面的各个目录应该要放什么文件数据，例如 /etc 应该放置设置文件，/bin 与 /sbin 则应该放置可执行文件等等。<br>第二层则是针对 /usr 及 /var 这两个目录的子目录来定义。例如 /var/log 放置系统日志文件，/usr/share 放置共享数据等等。<br><a href="http://refspecs.linuxfoundation.org/FHS_2.3/fhs-2.3.pdf" target="_blank" rel="noopener">FHS标准文档</a></p><ul><li><p>执行如下命令：</p><ul><li>tree /</li></ul></li><li><p>如果提示” command not found “，就先安装：</p><ul><li><p>sudo apt-get update</p></li><li><p>sudo apt-get install tree</p></li></ul></li></ul><hr><h3 id="B、目标路径"><a href="#B、目标路径" class="headerlink" title="B、目标路径"></a>B、目标路径</h3><ul><li>使用 cd 命令可以切换目录</li><li>在 Linux 里面使用 . 表示当前目录</li><li>.. 表示上一级目录（注意，我们上一节介绍过的，以 . 开头的文件都是隐藏文件，所以这两个目录必然也是隐藏的，你可以使用 ls -a 命令查看隐藏文件）</li><li><ul><li>表示上一次所在目录</li></ul></li><li>～ 通常表示当前用户的 home 目录</li><li>使用 pwd 命令可以获取当前所在路径（绝对路径）</li></ul><p><strong>提示：在进行目录切换的过程中请多使用 Tab 键自动补全，可避免输入错误，连续按两次 Tab 可以显示全部候选结果。</strong></p><hr><h2 id="二、Linux文件的基本操作"><a href="#二、Linux文件的基本操作" class="headerlink" title="二、Linux文件的基本操作"></a>二、Linux文件的基本操作</h2><h3 id="A、新建"><a href="#A、新建" class="headerlink" title="A、新建"></a>A、新建</h3><ul><li>创建名为 test 的空白文件，因为在其它目录没有权限，所以需要先 cd ~ 切换回用户的 /home/shiyanlou 目录：<ul><li>cd ~</li><li>touch test</li></ul></li><li>新建目录<ul><li>使用 mkdir（make directories）命令可以创建一个空目录，也可同时指定创建目录的权限属性。</li><li>创建名为“ mydir ”的空目录：<ul><li>mkdir mydir</li></ul></li></ul></li><li>使用 -p 参数，同时创建父目录（如果不存在该父目录），如下我们同时创建一个多级目录（这在安装软件、配置安装路径时非常有用）：<ul><li>mkdir -p father/son/grandson</li></ul></li></ul><p>后面的目录路径，以绝对路径的方式表示也是可以的。</p><hr><h3 id="B、复制"><a href="#B、复制" class="headerlink" title="B、复制"></a>B、复制</h3><p><strong>复制文件</strong></p><ul><li>使用 cp（copy）命令复制一个文件到指定目录。</li><li>将之前创建的“ test ”文件复制到“ /home/shiyanlou/father/son/grandson ”目录中：<ul><li>cp test father/son/grandson</li></ul></li></ul><p><strong>复制目录</strong></p><ul><li>复制目录需要加上 -r 或者 -R 参数，表示递归复制，就是说有点“株连九族”的意思：<ul><li>cp -r father family</li></ul></li></ul><hr><h3 id="C、删除"><a href="#C、删除" class="headerlink" title="C、删除"></a>C、删除</h3><ul><li><p>使用 rm（remove files or directories）命令删除一个文件：</p><ul><li>rm test</li></ul></li><li><p>有时候你会遇到想要删除一些为只读权限的文件，直接使用 rm 删除会显示一个提示，弱项忽略并直接删除文件，可以使用 -f 参数强制删除：</p><ul><li>rm -f test</li></ul></li><li>删除目录，跟复制目录一样，要删除一个目录，也需要加上 -r 或 -R 参数：<ul><li>rm -r family</li></ul></li></ul><hr><h3 id="D、移动文件与文件重命名"><a href="#D、移动文件与文件重命名" class="headerlink" title="D、移动文件与文件重命名"></a>D、移动文件与文件重命名</h3><p><strong>移动文件</strong></p><ul><li>使用 mv（move or rename files）命令移动文件（剪切）。将文件“ file1 ”移动到 Documents 目录：</li><li>mv 源目录文件 目的目录：<ul><li>mkdir Documents</li><li>mv file1 Documents</li></ul></li></ul><p><strong>重命名文件</strong></p><ul><li>将文件“ file1 ”重命名为“ myfile ”：</li><li>mv 旧的文件名 新的文件名：<ul><li>mv file1 myfile</li></ul></li></ul><p><strong>批量重命名</strong></p><ul><li>要实现批量重命名，mv 命令就有点力不从心了，我们可以使用一个看起来更专业的命令 rename 来实现。不过它要用 perl 正则表达式来作为参数<ul><li>cd /home/shiyanlou/</li></ul></li><li>使用通配符批量创建 5 个文件:<ul><li>touch file{1..5}.txt</li></ul></li><li>批量将这 5 个后缀为 .txt 的文本文件重命名为以 .c 为后缀的文件:<ul><li>rename ‘s/.txt/.c/‘ *.txt</li></ul></li><li>批量将这 5 个文件，文件名和后缀改为大写:<ul><li>rename ‘y/a-z/A-Z/‘ *.c</li></ul></li><li>简单解释一下上面的命令，rename 是先使用第二个参数的通配符匹配所有后缀为 .txt 的文件，然后使用第一个参数提供的正则表达式将匹配的这些文件的 .txt 后缀替换为 .c，这一点在后面学习了 sed 命令后，相信会更好地理解</li></ul><p>代码截图如下所示——<br><img src="https://dn-simplecloud.shiyanlou.com/8395611543329788197-wm" alt="实验楼"></p><hr><h3 id="E、查看文件"><a href="#E、查看文件" class="headerlink" title="E、查看文件"></a>E、查看文件</h3><ul><li><p>使用 cat，tac 和 nl 命令查看文件，前两个命令都是用来打印文件内容到标准输出（终端），其中 cat 为正序显示，tac 为倒序显示。<br><strong>标准输入输出：当我们执行一个 shell 命令行时通常会自动打开三个标准文件，即标准输入文件（stdin），默认对应终端的键盘、标准输出文件（stdout）和标准错误输出文件（stderr），后两个文件都对应被重定向到终端的屏幕，以便我们能直接看到输出内容。进程将从标准输入文件中得到输入数据，将正常输出数据输出到标准输出文件，而将错误信息送到标准错误文件中。</strong></p></li><li><p>比如我们要查看之前从 /etc 目录下拷贝来的 passwd 文件：</p><ul><li>cat passwd</li></ul></li><li>可以加上 -n 参数显示行号：<ul><li>cat -n passwd</li></ul></li><li>nl 命令，添加行号并打印，这是个比 cat -n 更专业的行号打印命令。</li><li>这里简单列举它的常用的几个参数：<ul><li>-b : 指定添加行号的方式，主要有两种：<ul><li>-b a:表示无论是否为空行，同样列出行号(“cat -n”就是这种方式)</li><li>-b t:只列出非空行的编号并列出（默认为这种方式）</li></ul></li><li>-n : 设置行号的样式，主要有三种：<ul><li>-n ln:在行号字段最左端显示</li><li>-n rn:在行号字段最右边显示，且不加 0</li><li>-n rz:在行号字段最右边显示，且加 0</li></ul></li><li>-w : 行号字段占用的位数(默认为 6 位)</li></ul></li></ul><p>发现使用这几个命令，默认的终端窗口大小，一屏显示不完文本的内容，得用鼠标拖动滚动条或者滑动滚轮才能继续往下翻页，要是可以直接使用键盘操作翻页就好了，那么你就可以使用下面要介绍的命令。</p><ul><li>使用 more 和 less 命令分页查看文件</li></ul><p>如果说上面的 cat 是用来快速查看一个文件的内容的，那么这个 more 和 less 就是天生用来”阅读”一个文件的内容的，比如说 man 手册内部就是使用的 less 来显示内容。其中 more 命令比较简单，只能向一个方向滚动，而 less 为基于 more 和 vi （一个强大的编辑器，我们有单独的课程来让你学习）开发，功能更强大。less 的使用基本和 more 一致，具体使用请查看 man 手册，这里只介绍 more 命令的使用。<br>使用 more 命令打开 passwd 文件：</p><ul><li>more passwd</li></ul><p>打开后默认只显示一屏内容，终端底部显示当前阅读的进度。可以使用 Enter 键向下滚动一行，使用 Space 键向下滚动一屏，按下 h 显示帮助，q 退出。</p><ul><li>使用 head 和 tail 命令查看文件</li></ul><p>这两个命令，那些性子比较急的人应该会喜欢，因为它们一个是只查看文件的头几行（默认为 10 行，不足 10 行则显示全部）和尾几行。还是拿 passwd 文件举例，比如当我们想要查看最近新增加的用户，那么我们可以查看这个 /etc/passwd 文件，不过我们前面也看到了，这个文件里面一大堆乱糟糟的东西，看起来实在费神啊。因为系统新增加一个用户，会将用户的信息添加到 passwd 文件的最后，那么这时候我们就可以使用 tail 命令了：</p><ul><li>tail /etc/passwd</li></ul><p>甚至更直接的只看一行， 加上 -n 参数，后面紧跟行数：</p><ul><li>tail -n 1 /etc/passwd</li></ul><p>关于 tail 命令，不得不提的还有它一个很牛的参数 -f，这个参数可以实现不停地读取某个文件的内容并显示。这可以让我们动态查看日志，达到实时监视的目的。</p><hr><h3 id="F、查看文件类型"><a href="#F、查看文件类型" class="headerlink" title="F、查看文件类型"></a>F、查看文件类型</h3><ul><li>使用 file 命令查看文件的类型：<ul><li>file /bin/ls</li></ul></li></ul><hr><h3 id="G、编辑文件"><a href="#G、编辑文件" class="headerlink" title="G、编辑文件"></a>G、编辑文件</h3><ul><li>vimtutor</li></ul><hr><h2 id="三、RELAX"><a href="#三、RELAX" class="headerlink" title="三、RELAX"></a>三、RELAX</h2><ul><li>召唤一双眼睛出来监督你：<ul><li>xeyes</li></ul></li><li>你可以使用如下命令将它放到后台运行：<ul><li>nohup xeyes </li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、Linux目录结构&quot;&gt;&lt;a href=&quot;#一、Linux目录结构&quot; class=&quot;headerlink&quot; title=&quot;一、Linux目录结构&quot;&gt;&lt;/a&gt;一、Linux目录结构&lt;/h2&gt;&lt;h3 id=&quot;A、FHS&quot;&gt;&lt;a href=&quot;#A、FHS&quot; class
      
    
    </summary>
    
      <category term="Ubuntu" scheme="www.rqwolverine.com/categories/Ubuntu/"/>
    
      <category term="Linux" scheme="www.rqwolverine.com/categories/Ubuntu/Linux/"/>
    
    
      <category term="Linux" scheme="www.rqwolverine.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux用户及文件权限管理</title>
    <link href="www.rqwolverine.com/Linux%E7%94%A8%E6%88%B7%E5%8F%8A%E6%96%87%E4%BB%B6%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86.html"/>
    <id>www.rqwolverine.com/Linux用户及文件权限管理.html</id>
    <published>2018-12-21T15:57:29.268Z</published>
    <updated>2018-12-21T16:04:44.414Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、Linux用户管理"><a href="#一、Linux用户管理" class="headerlink" title="一、Linux用户管理"></a>一、Linux用户管理</h2><h3 id="A、查看用户"><a href="#A、查看用户" class="headerlink" title="A、查看用户"></a>A、查看用户</h3><p>打开终端，输入命令：</p><ul><li>who am i</li></ul><p>或者</p><ul><li><p>who mom likes</p><blockquote><ul><li>输出的第一列表示打开当前伪终端的用户的用户名（要查看当前登录用户的用户名，去掉空格直接使用 whoami 即可），第二列的 pts/0 中 pts 表示伪终端，所谓伪是相对于 /dev/tty 设备而言的，还记得上一节讲终端时的那七个使用 [Ctrl]+[Alt]+[F1]～[F7] 进行切换的 /dev/tty 设备么,这是“真终端”，伪终端就是当你在图形用户界面使用 /dev/tty7 时每打开一个终端就会产生一个伪终端， pts/0 后面那个数字就表示打开的伪终端序号，你可以尝试再打开一个终端，然后在里面输入 who am i ，看第二列是不是就变成 pts/1 了，第三列则表示当前伪终端的启动时间。</li></ul></blockquote></li><li><p>who 命令其它常用参数</p></li></ul><table><thead><tr><th style="text-align:center">参数</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">-a</td><td style="text-align:center">打印能打印的全部</td></tr><tr><td style="text-align:center">-d</td><td style="text-align:center">打印死掉的进程</td></tr><tr><td style="text-align:center">-m</td><td style="text-align:center">同am i,mom likes</td></tr><tr><td style="text-align:center">-q</td><td style="text-align:center">打印当前登录用户数及用户名</td></tr><tr><td style="text-align:center">-u</td><td style="text-align:center">打印当前登录用户登录信息</td></tr><tr><td style="text-align:center">-r</td><td style="text-align:center">打印运行等级</td></tr></tbody></table><hr><h3 id="B、创建用户"><a href="#B、创建用户" class="headerlink" title="B、创建用户"></a>B、创建用户</h3><ul><li>在 Linux 系统里， root 账户拥有整个系统至高无上的权利，比如 新建/添加 用户。<br>一般登录系统时都是以普通账户的身份登录的，要创建用户需要 root 权限，这里就要用到 sudo 这个命令了。不过使用这个命令有两个大前提，一是你要知道当前登录用户的密码，二是当前用户必须在 sudo 用户组。shiyanlou 用户也属于 sudo 用户组。</li><li>su <user> 可以切换到用户 user，执行时需要输入目标用户的密码，sudo <cmd> 可以以特权级别运行 cmd 命令，需要当前用户属于 sudo 组，且需要输入当前用户的密码。su - <user> 命令也是切换用户，同时环境变量也会跟着改变成目标用户的环境变量。<ul><li>现在我们新建一个叫 lilei 的用户：<ul><li>sudo adduser lilei</li></ul></li><li>这个命令不但可以添加用户到系统，同时也会默认为新用户创建 home 目录：<ul><li>ls /home</li></ul></li><li>现在你已经创建好一个用户，并且你可以使用你创建的用户登录了，使用如下命令切换登录用户：<ul><li>su -l lilei</li></ul></li><li>输入刚刚设置的 lilei 的密码，然后输入如下命令并查看输出：<ul><li>who am i</li><li>whoami</li><li>pwd</li></ul></li><li>退出当前用户跟退出终端一样可以使用 exit 命令或者使用快捷键 Ctrl+d。<br>具体操作见如下截图——<br><img src="https://dn-simplecloud.shiyanlou.com/8395611543042173783-wm" alt="实验楼"></li></ul></user></cmd></user></li></ul><hr><h3 id="C、用户组"><a href="#C、用户组" class="headerlink" title="C、用户组"></a>C、用户组</h3><h4 id="Instructions："><a href="#Instructions：" class="headerlink" title="Instructions："></a>Instructions：</h4><p>在 Linux 里面每个用户都有一个归属（用户组），用户组简单地理解就是一组用户的集合，它们共享一些资源和权限，同时拥有私有资源，就跟家的形式差不多，你的兄弟姐妹（不同的用户）属于同一个家（用户组），你们可以共同拥有这个家（共享资源），爸妈对待你们都一样（共享权限），你偶尔写写日记，其他人未经允许不能查看（私有资源和权限）。当然一个用户是可以属于多个用户组的，正如你既属于家庭，又属于学校或公司。<br>在 Linux 里面如何知道自己属于哪些用户组呢？</p><hr><h4 id="方法一：使用-groups-命令"><a href="#方法一：使用-groups-命令" class="headerlink" title="方法一：使用 groups 命令"></a>方法一：使用 groups 命令</h4><ul><li>groups shiyanlou<ul><li>其中冒号之前表示用户，后面表示该用户所属的用户组。这里可以看到 shiyanlou 用户属于 shiyanlou 用户组，每次新建用户如果不指定用户组的话，默认会自动创建一个与用户名相同的用户组（差不多就相当于家长的意思，或者说是老总）。默认情况下在 sudo 用户组里的可以使用 sudo 命令获得 root 权限。shiyanlou 用户也可以使用 sudo 命令，为什么这里没有显示在 sudo 用户组里呢？可以查看下 /etc/sudoers.d/shiyanlou 文件，我们在 /etc/sudoers.d 目录下创建了这个文件，从而给 shiyanlou 用户赋予了 sudo 权限</li></ul></li></ul><hr><h4 id="方法二：查看-etc-group-文件"><a href="#方法二：查看-etc-group-文件" class="headerlink" title="方法二：查看 /etc/group 文件"></a>方法二：查看 /etc/group 文件</h4><ul><li>cat /etc/group | sort<ul><li>这里 cat 命令用于读取指定文件的内容并打印到终端输出，后面会详细讲它的使用。 | sort 表示将读取的文本进行一个字典排序再输出，然后你将看到如下一堆输出，你可以在最下面看到 shiyanlou 的用户组信息</li><li>没找到，没关系，你可以使用命令过滤掉一些你不想看到的结果：</li><li>cat /etc/group | grep -E “shiyanlou”</li></ul></li></ul><h4 id="etc-group-文件格式说明"><a href="#etc-group-文件格式说明" class="headerlink" title="etc/group 文件格式说明"></a><strong>etc/group 文件格式说明</strong></h4><ul><li>/etc/group 的内容包括用户组（Group）、用户组口令、GID 及该用户组所包含的用户（User），每个用户组一条记录。格式如下：<ul><li>group_name:password:GID:user_list<ul><li>你看到上面的 password 字段为一个 x 并不是说密码就是它，只是表示密码不可见而已。</li></ul></li></ul></li><li>将其它用户加入 sudo 用户组<ul><li>默认情况下新创建的用户是不具有 root 权限的，也不在 sudo 用户组，可以让其加入 sudo 用户组从而获取 root 权限：<ul><li>su -l lilei</li><li>sudo ls<ul><li>会提示 lilei 不在 sudoers 文件中，意思就是 lilei 不在 sudo 用户组中，至于 sudoers 文件（/etc/sudoers）你现在最好不要动它，操作不慎会导致比较麻烦的后果。<br>使用 usermod 命令可以为用户添加用户组，同样使用该命令你必需有 root 权限，你可以直接使用 root 用户为其它用户添加用户组，或者用其它已经在 sudo 用户组的用户使用 sudo 命令获取权限来执行该命令。</li></ul></li></ul></li><li>这里我用 shiyanlou 用户执行 sudo 命令将 lilei 添加到 sudo 用户组，让它也可以使用 sudo 命令获得 root 权限：<ul><li>su shiyanlou # 此处需要输入shiyanlou用户密码，点击右侧工具栏“SSH直连”，可以看到密码。</li><li>groups lilei</li><li>sudo usermod -G sudo lilei</li><li>groups lilei</li><li>然后你再切换回 lilei 用户，现在就可以使用 sudo 获取 root 权限了。</li></ul></li></ul></li></ul><p>代码截图如下所示：<br><img src="https://dn-simplecloud.shiyanlou.com/8395611543130453316-wm" alt="实验楼"></p><hr><h3 id="D、删除用户"><a href="#D、删除用户" class="headerlink" title="D、删除用户"></a>D、删除用户</h3><ul><li>删除用户是很简单的事：<ul><li>sudo deluser lilei –remove-home</li></ul></li></ul><hr><h2 id="二、Linux文件权限"><a href="#二、Linux文件权限" class="headerlink" title="二、Linux文件权限"></a>二、Linux文件权限</h2><h3 id="A、查看文件权限"><a href="#A、查看文件权限" class="headerlink" title="A、查看文件权限"></a>A、查看文件权限</h3><ul><li>使用较长格式列出文件：<ul><li>ls -l</li></ul></li><li>显示除了 .（当前目录）和 ..（上一级目录）之外的所有文件，包括隐藏文件（Linux 下以 . 开头的文件为隐藏文件）。<ul><li>ls -A</li></ul></li><li>可以同时使用 -A 和 -l 参数：<ul><li>ls -Al</li></ul></li><li>查看某一个目录的完整属性，而不是显示目录里面的文件属性：<ul><li>ls -dl &lt;目录名&gt;</li></ul></li><li>显示所有文件大小，并以普通人类能看懂的方式呈现：<ul><li>ls -AsSh<ul><li>其中小 s 为显示文件大小，大 S 为按文件大小排序，若需要知道如何按其它方式排序，请使用“man”命令查询。</li></ul></li></ul></li></ul><hr><h3 id="B、变更文件所有者"><a href="#B、变更文件所有者" class="headerlink" title="B、变更文件所有者"></a>B、变更文件所有者</h3><ul><li><p>假设目前是 lilei 用户登录，新建一个文件，命名为 “ iphone6 ”：</p><ul><li>cd /home/lilei</li><li>touch iphone6<ul><li>可见文件所有者是 lilei </li></ul></li></ul></li><li><p>现在，换回到 shiyanlou 用户身份，使用以下命令变更文件所有者为 shiyanlou ：</p><ul><li>cd /home/lilei</li><li>ls iphone6</li><li>sudo chown shiyanlou iphone6</li></ul></li></ul><hr><h3 id="C、修改文件权限"><a href="#C、修改文件权限" class="headerlink" title="C、修改文件权限"></a>C、修改文件权限</h3><p>如果你有一个自己的文件不想被其他用户读、写、执行，那么就需要对文件的权限做修改，这里有两种方式：<br><strong>方式一：二进制数字表示</strong></p><ul><li>每个文件的三组权限（拥有者，所属用户组，其他用户，记住这个顺序是一定的）对应一个 “ rwx “，也就是一个 “ 7 ” ，所以如果我要将文件“ iphone6 ”的权限改为只有我自己可以用那么就这样：</li><li>为了演示，我先在文件里加点内容：<ul><li>echo “echo \”hello shiyanlou\”” &gt; iphone6</li></ul></li><li>然后修改权限：<ul><li>chmod 600 iphone6</li></ul></li></ul><p>现在，其他用户已经不能读这个“ iphone6 ”文件了</p><p><strong>方式二：加减赋值操作</strong></p><ul><li>完成上述相同的效果，你可以：<ul><li>chmod go-rw iphone6</li></ul></li><li>g、o 还有 u 分别表示 group、others 和 user，+ 和 - 分别表示增加和去掉相应的权限。</li></ul><hr><p>##更多内容</p><ul><li>adduser 和 useradd 的区别是什么？<ul><li>答：useradd 只创建用户，创建完了用 passwd lilei 去设置新用户的密码。adduser 会创建用户，创建目录，创建密码（提示你设置），做这一系列的操作。其实 useradd、userdel 这类操作更像是一种命令，执行完了就返回。而 adduser 更像是一种程序，需要你输入、确定等一系列操作。</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、Linux用户管理&quot;&gt;&lt;a href=&quot;#一、Linux用户管理&quot; class=&quot;headerlink&quot; title=&quot;一、Linux用户管理&quot;&gt;&lt;/a&gt;一、Linux用户管理&lt;/h2&gt;&lt;h3 id=&quot;A、查看用户&quot;&gt;&lt;a href=&quot;#A、查看用户&quot; cla
      
    
    </summary>
    
      <category term="Ubuntu" scheme="www.rqwolverine.com/categories/Ubuntu/"/>
    
      <category term="Linux" scheme="www.rqwolverine.com/categories/Ubuntu/Linux/"/>
    
    
      <category term="Linux" scheme="www.rqwolverine.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux基本概念及操作</title>
    <link href="www.rqwolverine.com/Linux%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%E5%8F%8A%E6%93%8D%E4%BD%9C.html"/>
    <id>www.rqwolverine.com/Linux基本概念及操作.html</id>
    <published>2018-12-21T15:52:55.545Z</published>
    <updated>2018-12-21T16:05:02.929Z</updated>
    
    <content type="html"><![CDATA[<h2 id="命令行操作体验"><a href="#命令行操作体验" class="headerlink" title="命令行操作体验"></a>命令行操作体验</h2><h3 id="一、写在前面"><a href="#一、写在前面" class="headerlink" title="一、写在前面"></a>一、写在前面</h3><ul><li><p>创建一个名为 file 的文件，touch是一个命令</p><ul><li>touch file </li></ul></li><li><p>进入一个目录，cd是一个命令</p><ul><li>cd /etc/</li></ul></li><li><p>查看当前所在目录</p><ul><li>pwd<br>环境运行情况截图如下——<br><img src="https://dn-simplecloud.shiyanlou.com/8395611543019711858-wm" alt="实验楼"></li></ul></li></ul><hr><h3 id="二、快捷键指导"><a href="#二、快捷键指导" class="headerlink" title="二、快捷键指导"></a>二、快捷键指导</h3><ul><li><p>[Ctrl+c]</p><ul><li>想想你有没有遇到过这种情况，当你在 Linux 命令行中无意输入了一个不知道的命令，或者错误地使用了一个命令，导致在终端里出现了你无法预料的情况，比如，屏幕上只有光标在闪烁却无法继续输入命令，或者不停地输出一大堆你不想要的结果。</li></ul></li><li><p>其他快捷键</p></li></ul><table><thead><tr><th style="text-align:center">按键</th><th style="text-align:center">作用</th></tr></thead><tbody><tr><td style="text-align:center">Ctrl+d</td><td style="text-align:center">键盘输入结束或退出终端</td></tr><tr><td style="text-align:center">Ctrl+s</td><td style="text-align:center">暂停当前程序，暂停后按下任意键恢复运行</td></tr><tr><td style="text-align:center">Ctrl+z</td><td style="text-align:center">将当前程序放到后台运行，恢复到前台为命令fg</td></tr><tr><td style="text-align:center">Ctrl+a</td><td style="text-align:center">将光标移至输入行头，相当于Home键</td></tr><tr><td style="text-align:center">Ctrl+e</td><td style="text-align:center">将光标移至输入行末，相当于End键</td></tr><tr><td style="text-align:center">Ctrl+k</td><td style="text-align:center">删除从光标所在位置到行末</td></tr><tr><td style="text-align:center">Alt+Backspace</td><td style="text-align:center">向前删除一个单词</td></tr><tr><td style="text-align:center">Shift+PgUp</td><td style="text-align:center">将终端显示向上滚动</td></tr><tr><td style="text-align:center">Shift+PgDn</td><td style="text-align:center">将终端显示向下滚动</td></tr></tbody></table><hr><h3 id="三、通配符"><a href="#三、通配符" class="headerlink" title="三、通配符"></a>三、通配符</h3><ul><li>使用方式见截图如下<br><img src="https://dn-simplecloud.shiyanlou.com/8395611543020329287-wm" alt="实验楼"></li><li>Shell常用通配符</li></ul><table><thead><tr><th style="text-align:center">字符</th><th style="text-align:center">含义</th></tr></thead><tbody><tr><td style="text-align:center">*</td><td style="text-align:center">匹配 0 或多个字符</td></tr><tr><td style="text-align:center">?</td><td style="text-align:center">匹配任意一个字符</td></tr><tr><td style="text-align:center">[list]</td><td style="text-align:center">匹配 list 中的任意单一字符</td></tr><tr><td style="text-align:center">[^list]</td><td style="text-align:center">匹配 除list 中的任意单一字符以外的字符</td></tr><tr><td style="text-align:center">[c1-c2]</td><td style="text-align:center">匹配 c1-c2 中的任意单一字符 如：[0-9] [a-z]</td></tr><tr><td style="text-align:center">{string1,string2,…}</td><td style="text-align:center">匹配 string1 或 string2 (或更多)其一字符串</td></tr><tr><td style="text-align:center">{c1..c2}</td><td style="text-align:center">匹配 c1-c2 中全部字符 如{1..10}</td></tr></tbody></table><hr><h3 id="四、命令行中获取帮助"><a href="#四、命令行中获取帮助" class="headerlink" title="四、命令行中获取帮助"></a>四、命令行中获取帮助</h3><p><strong>man命令</strong>： manual pages缩写</p><ul><li>知道某个命令的作用，只是想快速查看一些它的某个具体参数的作用，那么你可以使用–help参数，大部分命令都会带有这个参数，如：<ul><li>ls –help</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;命令行操作体验&quot;&gt;&lt;a href=&quot;#命令行操作体验&quot; class=&quot;headerlink&quot; title=&quot;命令行操作体验&quot;&gt;&lt;/a&gt;命令行操作体验&lt;/h2&gt;&lt;h3 id=&quot;一、写在前面&quot;&gt;&lt;a href=&quot;#一、写在前面&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
      <category term="Linux" scheme="www.rqwolverine.com/categories/Linux/"/>
    
      <category term="Ubuntu" scheme="www.rqwolverine.com/categories/Linux/Ubuntu/"/>
    
    
      <category term="Linux" scheme="www.rqwolverine.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Github基本用法（下）</title>
    <link href="www.rqwolverine.com/Git%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95%EF%BC%88%E4%B8%8B%EF%BC%89.html"/>
    <id>www.rqwolverine.com/Git基本用法（下）.html</id>
    <published>2018-12-21T07:28:42.443Z</published>
    <updated>2018-12-21T07:31:11.998Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、比较内容"><a href="#一、比较内容" class="headerlink" title="一、比较内容"></a>一、比较内容</h2><h3 id="A、比较提交-Git-Diff"><a href="#A、比较提交-Git-Diff" class="headerlink" title="A、比较提交 - Git Diff"></a>A、比较提交 - Git Diff</h3><p><strong>备注：</strong><a href="https://www.jianshu.com/p/191d1e21f7ed" target="_blank" rel="noopener">markdown基本语法链接</a></p><ul><li>我们对项目做些修改：<pre><code>* cd gitproject</code></pre><ul><li>向README文件添加一行<ul><li>echo “new line” &gt;&gt; README.md</li></ul></li><li>添加新的文件file1<ul><li>echo “new file” &gt;&gt; file1</li></ul></li><li>使用git status查看当前修改的状态：<ul><li>git status<br><img src="https://dn-simplecloud.shiyanlou.com/8395611541834133957-wm" alt="实验楼"></li></ul></li><li>可以看到一个文件修改了，另外一个文件添加了。如何查看修改的文件内容呢，那就需要使用git diff命令。git diff命令的作用是比较修改的或提交的文件内容。<ul><li>git diff</li></ul></li><li>上面的命令执行后需要使用q退出。命令输出当前工作目录中修改的内容，并不包含新加文件，请注意这些内容还没有添加到本地缓存区。</li><li>将修改内容添加到本地缓存区，通配符可以把当前目录下所有修改的新增的文件都自动添加：<ul><li>git add *</li></ul></li><li>再执行git diff会发现没有任何内容输出，说明当前目录的修改都被添加到了缓存区，如何查看缓存区内与上次提交之间的差别呢？需要使用–cached参数：<ul><li>git diff –cached<br><img src="https://dn-simplecloud.shiyanlou.com/8395611541834354194-wm" alt="实验楼"></li></ul></li><li>可以看到输出中已经包含了新加文件的内容，因为file1已经添加到了缓存区。</li><li>最后我们提交代码：<ul><li>git commit -m ‘update code’<br><img src="https://dn-simplecloud.shiyanlou.com/8395611541834876802-wm" alt="实验楼"></li></ul></li></ul></li></ul><hr><h3 id="B、比较分支"><a href="#B、比较分支" class="headerlink" title="B、比较分支"></a>B、比较分支</h3><ul><li>可以用 git diff 来比较项目中任意两个分支的差异。</li><li>我们首先创建一个新的分支test，并在该分支上提交一些修改：<ul><li>创建test分支并切换到该分支<ul><li>git branch test</li><li>git checkout test</li></ul></li><li>添加新的一行到file1<ul><li>echo “branch test” &gt;&gt; file1</li></ul></li><li>创建新的文件file2<ul><li>echo “new file2” &gt;&gt; file2</li></ul></li><li>提交所有修改<ul><li>git add *</li><li>git commit -m ‘update test branch’</li></ul></li><li>然后，我们查看test分支和master之间的差别：<ul><li>git diff master test</li></ul></li></ul></li><li>git diff 是一个难以置信的有用的工具，可以找出你项目上任意两个提交点间的差异。可以使用git help diff详细查看其他参数和功能。<br><img src="https://dn-simplecloud.shiyanlou.com/8395611541836048716-wm" alt="实验楼"></li></ul><hr><h3 id="C、更多的比较选项"><a href="#C、更多的比较选项" class="headerlink" title="C、更多的比较选项"></a>C、更多的比较选项</h3><ul><li>如果你要查看当前的工作目录与另外一个分支的差别，你可以用下面的命令执行:<ul><li>切换到master<ul><li>git checkout master</li></ul></li><li>查看与test分支的区别<ul><li>git diff test</li></ul></li><li>你也以加上路径限定符，来只比较某一个文件或目录：<ul><li>git diff test file1</li></ul></li></ul></li><li>上面这条命令会显示你当前工作目录下的file1与test分支之间的差别。<br>–stat 参数可以统计一下有哪些文件被改动，有多少行被改动：<pre><code>* git diff test --stat</code></pre><img src="https://dn-simplecloud.shiyanlou.com/8395611541836343627-wm" alt="实验楼"></li></ul><hr><h2 id="二、分布式的工作流程"><a href="#二、分布式的工作流程" class="headerlink" title="二、分布式的工作流程"></a>二、分布式的工作流程</h2><h3 id="A、分布式的工作流程"><a href="#A、分布式的工作流程" class="headerlink" title="A、分布式的工作流程"></a>A、分布式的工作流程</h3><ul><li>你目前的项目在/home/shiyanlou/gitproject目录下，这是我们的git 仓库(repository)，另一个用户也想与你协作开发。他的工作目录在这台机器上，如何让他提交代码到你的 git 仓库呢？</li><li>首先，我们假设另一个用户也用shiyanlou用户登录，只是工作在不同的目录下开发代码，实际工作中不太可能发生，大部分情况都是多个用户，这个假设只是为了让实验简化。</li></ul><hr><p>该用户需要从 git 仓库进行克隆：</p><ul><li>进入到临时目录<ul><li>cd /tmp</li></ul></li><li>克隆git仓库<ul><li>git clone /home/shiyanlou/gitproject myrepo</li><li>ls -l myrepo</li></ul></li><li>这就建了一个新的叫”myrepo”的目录，这个目录里包含了一份gitproject仓库的克隆。这份克隆和原始的项目一模一样，并且拥有原始项目的历史记录。</li></ul><hr><p>在 myrepo 做了一些修改并且提交:</p><ul><li>cd myrepo</li><li>添加新的文件newfile<ul><li>echo “newcontent” &gt; newfile</li></ul></li><li>提交修改<ul><li>git add newfile</li><li>git commit -m “add newfile”</li></ul></li></ul><hr><p>myrepo修改完成后，如果我们想合并这份修改到gitproject的git仓库该如何做呢？</p><ul><li>可以在仓库/home/shiyanlou/gitproject中把myrepo的修改给拉 (pull)下来。执行下面几条命令:<ul><li>cd /home/shiyanlou/gitproject</li><li>git pull /tmp/myrepo master</li></ul></li><li>查看当前目录文件<ul><li>ls                                                                                         </li></ul></li></ul><p>这就把myrepo的主分支合并到了gitproject的当前分支里了</p><hr><p>如果gitproject在myrepo修改文件内容的同时也做了修改的话，可能需要手工去修复冲突。<br>如果你要经常操作远程分支(remote branch),你可以定义它们的缩写:</p><ul><li>git remote add myrepo /tmp/myrepo</li></ul><p>git pull命令执行两个操作: </p><ul><li>从远程分支(remote branch)抓取修改git fetch的内容</li><li>然后把它合并git merge进当前的分支。</li></ul><p>gitproject里可以用git fetch 来执行git pull前半部分的工作， 但是这条命令并不会把抓下来的修改合并到当前分支里：</p><ul><li>git fetch myrepo<br>From /tmp/myrepo<ul><li>[new branch]      master     -&gt; myrepo/master</li></ul></li></ul><p>获取后，我们可以通过git log查看远程分支做的所有修改，由于我们已经合并了所有修改，所以不会有任何输出：</p><ul><li>git log -p master..myrepo/master</li></ul><p>当检查完修改后，gitproject可以把修改合并到它的主分支中：</p><ul><li>git merge myrepo/master<ul><li>Already up-to-date.</li></ul></li></ul><p>如果我们在myrepo目录下执行git pull会发生什么呢？</p><ul><li>myrepo会从克隆的位置拉取代码并更新本地仓库，就是把gitproject上的修改同步到本地:<ul><li>进入到gitproject</li></ul></li><li>cd /home/shiyanlou/gitproject<ul><li>添加一行内容到newfile</li></ul></li><li>echo “gitproject: new line” &gt;&gt; newfile<ul><li>提交修改</li></ul></li><li>git commit -a -m ‘add newline to newfile’<ul><li>进入myrepo目录</li></ul></li><li>cd /tmp/myrepo<ul><li>同步gitproject的所有修改</li></ul></li><li>git pull</li></ul><p>因为myrepo是从gitproject仓库克隆的，那么他就不需要指定gitproject仓库的地 址。因为Git把gitproject仓库的地址存储到myrepo的配置文件中，这个地址就是在git pull时默认使用的远程仓库：</p><ul><li>git config –get remote.origin.url<ul><li>/home/shiyanlou/gitproject（此为显示，并非命令）</li></ul></li></ul><p>如果myrepo和gitproject在不同的主机上，可以通过ssh协议来执行clone 和pull操作：</p><ul><li>git clone localhost:/home/shiyanlou/gitproject test</li></ul><p>这个命令会提示你输入shiyanlou用户的密码，用户密码随机，可以点击实验操作界面右侧工具栏的SSH直连按钮查看.</p><hr><h3 id="B、Public-Git-Base"><a href="#B、Public-Git-Base" class="headerlink" title="B、Public Git Base"></a>B、Public Git Base</h3><p>开发过程中，通常大家都会使用一个公共的仓库，并clone到自己的开发环境中，完成一个阶段的代码后可以告诉目标仓库的维护者来pull自己的代码。<br>如果你和维护者都在同一台机器上有帐号，那么你们可以互相从对 方的仓库目录里直接拉所作的修改，git命令里的仓库地址也可以是本地的某个目录名：</p><ul><li>git clone /path/to/repository</li><li>git pull /path/to/other/repository</li></ul><p>也可以是一个ssh地址：</p><p>*git clone ssh://yourhost/~you/repository</p><hr><h3 id="C、将修改推到一个公共Basement"><a href="#C、将修改推到一个公共Basement" class="headerlink" title="C、将修改推到一个公共Basement"></a>C、将修改推到一个公共Basement</h3><p>通过http或是git协议，其它维护者可以通过远程访问的方式抓取(fetch)你最近的修改，但是他们 没有写权限。如何将本地私有仓库的最近修改主动上传到公共仓库中呢？<br>最简单的办法就是用git push命令，推送本地的修改到远程Git仓库，执行下面的命令:</p><ul><li>git push ssh://yourserver.com/~you/proj.git master:master</li></ul><p>或者</p><ul><li>git push ssh://yourserver.com/~you/proj.git master</li></ul><p>git push命令的目地仓库可以是ssh或http/https协议访问。</p><hr><h3 id="D、代码推送失败怎么办？"><a href="#D、代码推送失败怎么办？" class="headerlink" title="D、代码推送失败怎么办？"></a>D、代码推送失败怎么办？</h3><p>如果推送(push)结果不是快速向前fast forward，可能会报像下面一样的错误：</p><ul><li>error: remote ‘refs/heads/master’ is not an ancestor of<br>local  ‘refs/heads/master’.<br>Maybe you are not up-to-date and need to pull first?</li><li>error: failed to push to ‘ssh://yourserver.com/~you/proj.git’</li></ul><p>这种情况通常是因为没有使用git pull获取远端仓库的最新更新，在本地修改的同时，远端仓库已经变化了（其他协作者提交了代码），此时应该先使用git pull合并最新的修改后再执行git push：</p><ul><li>git pull</li><li>git push ssh://yourserver.com/~you/proj.git master</li></ul><hr><h2 id="三、Git标签"><a href="#三、Git标签" class="headerlink" title="三、Git标签"></a>三、Git标签</h2><h3 id="A、轻量级标签"><a href="#A、轻量级标签" class="headerlink" title="A、轻量级标签"></a>A、轻量级标签</h3><p>我们可以用 git tag不带任何参数创建一个标签(tag)指定某个提交(commit):</p><ul><li>进入到gitproject目录<ul><li>cd /home/shiyanlou/gitproject</li></ul></li><li>查看git提交记录<ul><li>git log</li></ul></li><li>选择其中一个记录标志位stable-1的标签，注意需要将后面的8c315325替换成仓库下的真实提交内，commit的名称很长，通常我们只需要写前面8位即可<ul><li>git tag stable-1 8c315325</li></ul></li><li>查看当前所有tag<ul><li>git tag</li></ul></li></ul><p>这样，我们可以用stable-1 作为提交 8c315325 的代称。<br>前面这样创建的是一个“轻量级标签”。<br>如果你想为一个tag添加注释，或是为它添加一个签名, 那么我们就需要创建一个 “标签对象”。</p><hr><p><strong>标签对象</strong><br>git tag中使用-a， -s 或是 -u三个参数中任意一个，都会创建一个标签对象，并且需要一个标签消息(tag message)来为tag添加注释。 如果没有-m 或是 -F 这些参数，命令执行时会启动一个编辑器来让用户输入标签消息。<br>当这样的一条命令执行后，一个新的对象被添加到Git对象库中，并且标签引用就指向了一个标签对象，而不是指向一个提交，这就是与轻量级标签的区别。</p><ul><li><p>下面是一个创建标签对象的例子:</p><ul><li>git tag -a stable-2 8c315325 -m “stable 2”</li><li>git tag</li></ul></li></ul><hr><h3 id="B、签名的标签"><a href="#B、签名的标签" class="headerlink" title="B、签名的标签"></a>B、签名的标签</h3><p>签名标签可以让提交和标签更加完整可信。如果你配有GPG key，那么你就很容易创建签名的标签。首先你要在你的 .git/config 或 ~/.gitconfig 里配好key。</p><ul><li>下面是示例:<ul><li><blockquote><p>[user]<br>signingkey = <gpg-key-id></gpg-key-id></p></blockquote></li><li>你也可以用命令行来配置:<ul><li>git config (–global) user.signingkey <gpg-key-id></gpg-key-id></li></ul></li></ul></li></ul><p>现在你可以在创建标签的时候使用-s 参数来创建“签名的标签”：</p><ul><li>git tag -s stable-1 1b2e1d63ff<br>如果没有在配置文件中配GPG key,你可以用-u参数直接指定:</li><li>git tag -u <gpg-key-id> stable-1 1b2e1d63ff</gpg-key-id></li></ul><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、比较内容&quot;&gt;&lt;a href=&quot;#一、比较内容&quot; class=&quot;headerlink&quot; title=&quot;一、比较内容&quot;&gt;&lt;/a&gt;一、比较内容&lt;/h2&gt;&lt;h3 id=&quot;A、比较提交-Git-Diff&quot;&gt;&lt;a href=&quot;#A、比较提交-Git-Diff&quot; class
      
    
    </summary>
    
      <category term="Github" scheme="www.rqwolverine.com/categories/Github/"/>
    
      <category term="Git" scheme="www.rqwolverine.com/categories/Github/Git/"/>
    
    
      <category term="git" scheme="www.rqwolverine.com/tags/git/"/>
    
      <category term="github" scheme="www.rqwolverine.com/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>Github基本用法（上）</title>
    <link href="www.rqwolverine.com/Git%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95%EF%BC%88%E4%B8%8A%EF%BC%89.html"/>
    <id>www.rqwolverine.com/Git基本用法（上）.html</id>
    <published>2018-12-21T07:22:22.447Z</published>
    <updated>2018-12-21T07:31:17.797Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、Git的初始化"><a href="#一、Git的初始化" class="headerlink" title="一、Git的初始化"></a>一、Git的初始化</h2><h3 id="A、Git配置"><a href="#A、Git配置" class="headerlink" title="A、Git配置"></a>A、Git配置</h3><p>1.使用Git的第一件事就是设置你的名字和email,这些就是你在提交commit时的签名，每次提交记录里都会包含这些信息。使用git config命令进行配置：</p><ul><li>$ git config –global user.name “Scott Chacon”</li><li>$ git config –global user.email “<a href="mailto:schacon@gmail.com" target="_blank" rel="noopener">schacon@gmail.com</a>“</li></ul><p>2.执行了上面的命令后,会在家目录(/home/shiyanlou)下建立一个叫.gitconfig 的文件（该文件为隐藏文件，需要使用<strong>ls -al</strong>查看到）. 内容一般像下面这样，可以使用vim或cat查看文件内容:——如下图所示<br><img src="https://dn-simplecloud.shiyanlou.com/8395611541716044090-wm" alt="实验楼"></p><p>3.上面的配置文件就是Git全局配置的文件，一般配置方法是git config –global &lt;配置名称&gt; &lt;配置的值&gt;。</p><p>4.<strong>P.S.:</strong>如果你想使项目里的某个值与前面的全局设置有区别(例如把私人邮箱地址改为工作邮箱)，你可以在项目中使用git config 命令不带 –global 选项来设置. 这会在你当前的项目目录下创建 .git/config，从而使用针对当前项目的配置。</p><hr><h3 id="B、Clone一个仓库"><a href="#B、Clone一个仓库" class="headerlink" title="B、Clone一个仓库"></a>B、Clone一个仓库</h3><ul><li>为了得到一个项目的拷贝(copy),我们需要知道这个项目仓库的地址(Git URL). Git能在许多协议下使用，所以Git URL可能以ssh://, http(s)://, git://. 有些仓库可以通过不只一种协议来访问。</li><li>clone 操作完成后，会发现当前目录下多了一个gitproject文件夹，这个文件夹里的内容就是我们刚刚clone下来的代码。由于当前`gitproject仅是测试项目，里面仅有一个README.md文件。</li><li>可以发现在命令提示符$前面多了个(master)。这是由于实验楼的Linux使用的是zsh Shell，zsh会判断当前的目录是否有Git仓库，如果是的话则自动把目前所在的git分支显示在提示符中。</li></ul><hr><h3 id="C、初始化一个新的仓库"><a href="#C、初始化一个新的仓库" class="headerlink" title="C、初始化一个新的仓库"></a>C、初始化一个新的仓库</h3><p>1.可以对一个已存在的文件夹用下面的命令让它置于Git的版本控制管理之下</p><ul><li>创建代码目录project：<ul><li>$ cd /home/shiyanlou/</li><li>$ mkdir project</li></ul></li><li>进入到代码目录，创建并初始化Git仓库：<ul><li>$ cd project</li><li>$ git init</li></ul></li><li>Git会输出:<ul><li>Initialized empty Git repository in /home/shiyanlou/project/.git/</li></ul></li><li>通过ls -la命令会发现project目录下会有一个名叫.git 的目录被创建，这意味着一个仓库被初始化了。可以进入到.git目录查看下有哪些内容。</li><li>代码截图见下图——<br><img src="https://dn-simplecloud.shiyanlou.com/8395611541716741615-wm" alt="实验楼"></li></ul><hr><h2 id="二、正常的工作流程"><a href="#二、正常的工作流程" class="headerlink" title="二、正常的工作流程"></a>二、正常的工作流程</h2><p><strong>git的基本流程如下：</strong></p><p>1.创建或修改文件<br>2.使用git add命令添加新创建或修改的文件到本地的缓存区（Index）<br>3.使用git commit命令提交到本地代码库（可选，有的时候并没有可以同步的远端代码库）<br>4.使用git push命令将本地代码库同步到远端代码库</p><hr><h3 id="A、创建或修改文件"><a href="#A、创建或修改文件" class="headerlink" title="A、创建或修改文件"></a>A、创建或修改文件</h3><ul><li>进入我们刚才建立的project目录，分别创建文件file1，file2，file3：</li><li><img src="https://dn-simplecloud.shiyanlou.com/8395611541717063208-wm" alt="实验楼"> </li><li>此时可以使用git status命令查看当前git仓库的状态：</li><li>可以发现，有三个文件处于untracked状态，下一步我们就需要用git add命令将他们加入到缓存区（Index）</li></ul><hr><h3 id="B、使用Git-add加入缓存区"><a href="#B、使用Git-add加入缓存区" class="headerlink" title="B、使用Git add加入缓存区"></a>B、使用Git add加入缓存区</h3><ul><li>使用git add命令将新建的文件添加</li><li>然后再次执行git status就会发现新的变化</li><li>现在为commit做好了准备，可以使用 git diff 命令再加上 –cached 参数，看看缓存区中哪些文件被修改了。进入到git diff –cached界面后需要输入q才可以退出</li><li>如果没有–cached参数，git diff 会显示当前你所有已做的但没有加入到索引里的修改<br><img src="https://dn-simplecloud.shiyanlou.com/8395611541717696946-wm" alt="实验楼"></li></ul><hr><h3 id="C、使用git-commit提交修改"><a href="#C、使用git-commit提交修改" class="headerlink" title="C、使用git commit提交修改"></a>C、使用git commit提交修改</h3><ul><li>当所有新建，修改的文件都被添加到了缓存区，我们就要使用git commit提交到本地仓库：<ul><li>$ git commit -m “add 3 files”</li></ul></li><li>需要使用-m添加本次修改的注释，完成后就会记录一个新的项目版本。除了用git add 命令，我们还可以用下面的命令将所有没有加到缓存区的修改也一起提交，但-a命令不会添加新建的文件。<ul><li>$ git commit -a -m “add 3 files”</li></ul></li><li><p>再次输入git status查看状态，会发现当前的代码库已经没有待提交的文件了，缓存区已经被清空。<br><img src="https://dn-simplecloud.shiyanlou.com/8395611541718027792-wm" alt="实验楼"></p></li><li><p>至此，我们完成了第一次代码提交，这次提交的代码中我们创建了三个新文件。需要注意的是如果是修改文件，也需要使用git add命令添加到缓存区才可以提交。如果是删除文件，则直接使用git rm命令删除后会自动将已删除文件的信息添加到缓存区，git commit提交后就会将本地仓库中的对应文件删除</p></li></ul><hr><ul><li>这时如果我们希望将本地仓库关联到远端服务器，我们可以使用 git remote 命令，不同于刚刚的 git clone 命令，直接将远端的仓库克隆下来。 我们当前的仓库是使用 git init 初始化的本地仓库，所以我们需要将本地仓库与远程仓库关联，使用如下命令（需要修改下面的远程仓库地址为自己的仓库地址）：<ul><li>git remote add origin <a href="https://github.com/kinglion580/shiyanlou.git" target="_blank" rel="noopener">https://github.com/kinglion580/shiyanlou.git</a></li></ul></li><li>对于上述命令而言，git remote add 命令用于添加远程主机，origin 是主机名，此处我们可以自定义，不一定非要使用 origin，而 <a href="https://github.com/kinglion580/shiyanlou.git" target="_blank" rel="noopener">https://github.com/kinglion580/shiyanlou.git</a>  是我自己的远程仓库，此处 需要替换为自己的远程仓库地址</li><li>这个时候如果本地的仓库连接到了远程Git服务器，可以使用下面的命令将本地仓库同步到远端服务器：<ul><li><strong>需要输入仓库对应的用户名和密码</strong></li><li>$ git push origin master<br><img src="https://dn-simplecloud.shiyanlou.com/8395611541718487316-wm" alt="实验楼"></li></ul></li></ul><hr><h2 id="三、分支与合并"><a href="#三、分支与合并" class="headerlink" title="三、分支与合并"></a>三、分支与合并</h2><h3 id="A、创建分支"><a href="#A、创建分支" class="headerlink" title="A、创建分支"></a>A、创建分支</h3><ul><li>一个Git仓库可以维护很多开发分支。现在我们来创建一个新的叫 experimental的分支：<ul><li>$ git branch experimental</li></ul></li><li>运行git branch命令可以查看当前的分支列表，以及目前的开发环境处在哪个分支上<ul><li>$ git branch</li></ul></li></ul><hr><h3 id="B、切换分支"><a href="#B、切换分支" class="headerlink" title="B、切换分支"></a>B、切换分支</h3><ul><li>experimental 分支是你刚才创建的，master分支是Git系统默认创建的主分支。星号标识了你当工作在哪个分支下，输入git checkout 分支名可以切换到其他分支：<ul><li>$ git checkout experimental</li><li>Switched to branch ‘experimental’</li></ul></li><li>切换到experimental分支，切换完成后，先编辑里面的一个文件，再提交(commit)改动，最后切换回 “master”分支：<ul><li>修改文件file1</li><li>echo “update” &gt;&gt; file1</li><li>查看当前状态</li><li>git status</li><li>添加并提交file1的修改</li><li>git add file1</li><li>git commit -m “update file1”</li><li>查看file1的内容</li><li>cat file1</li><li>切换到master分支</li><li>git checkout master</li></ul></li><li>查看下file1中的内容会发现刚才做的修改已经看不到了。因为刚才的修改时在experimental分支下，现在切换回了master分支，目录下的文件都是master分支上的文件了<br><img src="https://dn-simplecloud.shiyanlou.com/8395611541719370473-wm" alt="实验楼"></li></ul><hr><h3 id="C、合并分支"><a href="#C、合并分支" class="headerlink" title="C、合并分支"></a>C、合并分支</h3><ul><li>现在可以在master分支下再作一些不同的修改:<ul><li>修改文件file2<ul><li>echo “update again” &gt;&gt; file2</li></ul></li><li>查看当前状态<ul><li>git status</li></ul></li><li>添加并提交file2的修改<ul><li>git add file2</li><li>git commit -m “update file2 on master”</li></ul></li><li>查看file2的内容<ul><li>cat file2</li><li>test</li><li>update again</li></ul></li></ul></li><li>这时，两个分支就有了各自不同的修改，分支的内容都已经不同，如何将多个分支进行合并呢？</li><li><p>可以通过下面的git merge命令来合并experimental到主线分支master:</p><ul><li>切换到master分支<ul><li>git checkout master</li><li>将experimental分支合并到master</li><li>git merge -m ‘merge experimental branch’ experimental</li><li><strong>-m参数仍然是需要填写合并的注释信息。</strong></li></ul></li></ul></li><li><p>由于两个 branch 修改了两个不同的文件，所以合并时不会有冲突，执行上面的命令后合并就完成了。</p></li><li>如果有冲突，比如两个分支都改了一个文件 file3，则合并时会失败。首先我们在master分支上修改file3文件并提交：<ul><li>切换到master分支<ul><li>git checkout master</li><li>修改file3文件</li><li>echo “master: update file3” &gt;&gt; file3</li><li>提交到master分支</li><li>git commit -a -m ‘update file3 on master’</li></ul></li><li>然后切换到experimental，修改file3并提交：</li><li>切换到experimental分支<ul><li>git checkout experimental</li></ul></li><li>修改file3文件<ul><li>echo “experimental: update file3” &gt;&gt; file3</li></ul></li><li>提交到experimental分支<ul><li>git commit -a -m ‘update file3 on experimental’</li></ul></li><li>切换到master进行合并：<ul><li>git checkout master</li><li>git merge experimental</li><li>Auto-merging file3</li><li>CONFLICT (content): Merge conflict in file3</li><li>Automatic merge failed; fix conflicts and then commit the result.</li></ul></li></ul></li><li>合并失败后先用git status查看状态，会发现file3显示为both modified，查看file3内容会发现：（此处略去）</li><li>上面的内容也可以使用git diff查看，先前已经提到git diff不加参数可以显示未提交到缓存区中的修改内容。</li><li>可以看到冲突的内容都被添加到了file3中，我们使用vim编辑这个文件，去掉git自动产生标志冲突的单向箭头等符号后，根据需要只保留我们需要的内容后保存，然后使用git add file3和git commit命令来提交合并后的file3内容，这个过程是手动解决冲突的流程。<ul><li>编辑冲突文件<ul><li>vim file3</li></ul></li><li>提交修改后的文件<ul><li>git add file3</li><li>git commit -m ‘merge file3’<br><img src="https://dn-simplecloud.shiyanlou.com/8395611541719797048-wm" alt="实验楼"><br><img src="https://dn-simplecloud.shiyanlou.com/8395611541719853499-wm" alt="实验楼"></li></ul></li></ul></li></ul><hr><h3 id="D、撤销一个合并"><a href="#D、撤销一个合并" class="headerlink" title="D、撤销一个合并"></a>D、撤销一个合并</h3><ul><li>如果合并后的状态是一团乱麻，想把当前的修改都放弃，你可以用下面的命令回到合并之前的状态：<pre><code>* git reset --hard HEAD^</code></pre><ul><li>查看file3的内容，已经恢复到合并前的master上的文件内容<ul><li>cat file3</li></ul></li><li>代码截图如下所示——<br><img src="https://dn-simplecloud.shiyanlou.com/8395611541719939226-wm" alt="实验楼"></li></ul></li></ul><hr><h3 id="E、快速向前合并"><a href="#E、快速向前合并" class="headerlink" title="E、快速向前合并"></a>E、快速向前合并</h3><ul><li>通常，一个合并会产生一个合并提交(commit), 把两个父分支里的每一行内容都合并进来。</li><li>但是，如果当前的分支和另一个分支没有内容上的差异，就是说当前分支的每一个提交(commit)都已经存在另一个分支里了，git 就会执行一个“快速向前”(fast forward)操作；git 不创建任何新的提交(commit),只是将当前分支指向合并进来的分支。</li></ul><hr><h2 id="四、Git日志"><a href="#四、Git日志" class="headerlink" title="四、Git日志"></a>四、Git日志</h2><h3 id="A、查看日志"><a href="#A、查看日志" class="headerlink" title="A、查看日志"></a>A、查看日志</h3><ul><li>git log命令可以显示所有的提交(commit)：<ul><li>git log</li></ul></li><li>如果提交的历史纪录很长，回车会逐步显示，输入q可以退出。</li><li>git log有很多选项，可以使用git help log查看，例如下面的命令就是找出所有从”v2.5“开始在 fs 目录下的所有 Makefile 的修改（这个只是举例，不用操作）：<ul><li>git log v2.5.. Makefile fs/</li><li>Git会根据git log命令的参数，按时间顺序显示相关的提交(commit)</li></ul></li></ul><hr><h3 id="B、日志统计"><a href="#B、日志统计" class="headerlink" title="B、日志统计"></a>B、日志统计</h3><ul><li>如果用–stat 选项使用 git log’,它会显示在每个提交(commit)中哪些文件被修改了, 这些文件分别添加或删除了多少行内容，这个命令相当于打印详细的提交记录：<ul><li>git log –stat</li></ul></li></ul><hr><h3 id="C、格式化日志"><a href="#C、格式化日志" class="headerlink" title="C、格式化日志"></a>C、格式化日志</h3><ul><li>你可以按你的要求来格式化日志输出。–pretty 参数可以使用若干表现格式，如oneline:<ul><li>git log –pretty=oneline</li></ul></li><li>或者你也可以使用 short 格式:<ul><li>git log –pretty=short</li></ul></li><li>你也可用medium,full,fuller,email 或raw。 如果这些格式不完全符合你的需求， 你也可以用–pretty=format参数定义格式。</li><li>–graph 选项可以可视化你的提交图(commit graph)，会用ASCII字符来画出一个很漂亮的提交历史(commit history)线：<ul><li>git log –graph –pretty=oneline</li></ul></li></ul><hr><h3 id="D、日志排序"><a href="#D、日志排序" class="headerlink" title="D、日志排序"></a>D、日志排序</h3><ul><li>日志记录可以按不同的顺序来显示。如果你要指定一个特定的顺序，可以为git log命令添加顺序参数。</li><li>按默认情况，提交会按逆时间顺序显示，可以指定–topo-order参数，让提交按拓扑顺序来显示(就是子提交在它们的父提交前显示):<ul><li>git log –pretty=format:’%h : %s’ –topo-order –graph</li></ul></li><li>你也可以用 –reverse参数来逆向显示所有提交日志。</li></ul><hr><h2 id="五、该章节小结"><a href="#五、该章节小结" class="headerlink" title="五、该章节小结"></a>五、该章节小结</h2><h3 id="本节共几个基本命令："><a href="#本节共几个基本命令：" class="headerlink" title="本节共几个基本命令："></a><strong>本节共几个基本命令：</strong></h3><ul><li>1.git config：配置相关信息</li><li>2.git clone：复制仓库</li><li>3.git init：初始化仓库</li><li>4.git add：添加更新内容到索引中</li><li>5.git diff：比较内容</li><li>6.git status：获取当前项目状况</li><li>7.git commit：提交</li><li>8.git branch：分支相关</li><li>9.git checkout：切换分支</li><li>10.git merge：合并分支</li><li>11.git reset：恢复版本</li><li>12.git log：查看日志</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、Git的初始化&quot;&gt;&lt;a href=&quot;#一、Git的初始化&quot; class=&quot;headerlink&quot; title=&quot;一、Git的初始化&quot;&gt;&lt;/a&gt;一、Git的初始化&lt;/h2&gt;&lt;h3 id=&quot;A、Git配置&quot;&gt;&lt;a href=&quot;#A、Git配置&quot; class=&quot;he
      
    
    </summary>
    
      <category term="Github" scheme="www.rqwolverine.com/categories/Github/"/>
    
      <category term="Git" scheme="www.rqwolverine.com/categories/Github/Git/"/>
    
    
      <category term="git" scheme="www.rqwolverine.com/tags/git/"/>
    
      <category term="github" scheme="www.rqwolverine.com/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>Github快速入门</title>
    <link href="www.rqwolverine.com/Github%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8.html"/>
    <id>www.rqwolverine.com/Github快速入门.html</id>
    <published>2018-12-21T07:07:29.817Z</published>
    <updated>2018-12-21T15:43:31.228Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、创建远程仓库"><a href="#一、创建远程仓库" class="headerlink" title="一、创建远程仓库"></a>一、创建远程仓库</h2><hr><h3 id="A、SSH公私钥的使用"><a href="#A、SSH公私钥的使用" class="headerlink" title="A、SSH公私钥的使用"></a>A、SSH公私钥的使用</h3><h4 id="a、秘钥创建"><a href="#a、秘钥创建" class="headerlink" title="a、秘钥创建"></a>a、秘钥创建</h4><ul><li>键入ssh-keygen，可以选择一路回车（即此时默认密码为回车键）</li><li>到选择存放密钥文件的路径下查看，这里使用的使默认路径，所以使 ~/.ssh/ 路径下，可以看到生成了两个密钥文件，后缀为 .pub 的就是公钥文件，另一个没有后缀的就是私钥文件，可以看到密钥文件创建完毕<br><img src="https://dn-simplecloud.shiyanlou.com/8395611541656771747-wm" alt="实验楼"></li></ul><h4 id="b、关联公钥到Github账号下"><a href="#b、关联公钥到Github账号下" class="headerlink" title="b、关联公钥到Github账号下"></a>b、关联公钥到Github账号下</h4><p>1.首先复制公钥文件中的内容，也就是 ssh-rsa 开头到 用户名@主机名 这段字符串.相关命令如下图所示——<br><img src="https://dn-simplecloud.shiyanlou.com/8395611541657148981-wm" alt="实验楼"><br>2.然后回到 Github, 点击右上角头像的下拉按钮，选择 Settings<br>3.然后在 Settings 页面中选择左边菜单里的 SSH and GPG keys，然后点击右上角的 New SSH key 按钮，填写 Title 和 Key，然后点击 Add SSH key 按钮提交<br>4.通过返回的页面可以看到公钥与 Github 已经关联完毕</p><h4 id="c、安装配置Git工具"><a href="#c、安装配置Git工具" class="headerlink" title="c、安装配置Git工具"></a>c、安装配置Git工具</h4><p>1.安装</p><ul><li>首先在终端下面敲入 git –version， 如果正确回显版本号，则说明已经安装好，如果没有则在终端敲入下面这条命令进行安装——sudo apt-get install git -y</li></ul><p>2.配置用户名与邮箱</p><ul><li>命令内容见截图如下<br><img src="https://dn-simplecloud.shiyanlou.com/8395611541657648674-wm" alt="实验楼"></li></ul><hr><h2 id="二、克隆远程仓库到本地"><a href="#二、克隆远程仓库到本地" class="headerlink" title="二、克隆远程仓库到本地"></a>二、克隆远程仓库到本地</h2><h3 id="A、克隆远程仓库到个人的PC"><a href="#A、克隆远程仓库到个人的PC" class="headerlink" title="A、克隆远程仓库到个人的PC"></a>A、克隆远程仓库到个人的PC</h3><ul><li>首先到远程仓库中，点击 Clone or download 按钮，选择使用 Use SSH，然后点击复制链接按钮</li><li>于命令行中输入如图指令执行克隆——<br><img src="https://dn-simplecloud.shiyanlou.com/8395611541658153638-wm" alt="实验楼"></li></ul><h3 id="B、克隆仓库到实验楼的在线环境"><a href="#B、克隆仓库到实验楼的在线环境" class="headerlink" title="B、克隆仓库到实验楼的在线环境"></a>B、克隆仓库到实验楼的在线环境</h3><ul><li>打开 Xfce 终端，输入以下命令克隆仓库到在线环境中，这里要注意下，因为在线环境环境的 SSH 公钥是没有关联 Github 账户的，所以这里克隆仓库到本地是需要对应上 Github 的用户名与密码的，具体操作如下——</li><li>在实验环境中打开浏览器，输入远程仓库地址，Github 的URL地址构造是 <a href="https://github.com/用户名/仓库名称，" target="_blank" rel="noopener">https://github.com/用户名/仓库名称，</a> 而我的用户名和仓库名称都是 shiyanlou-001 所以这里我自己的项目地址为<a href="https://github.com/shiyanlou-001/shiyanlou-001" target="_blank" rel="noopener">https://github.com/shiyanlou-001/shiyanlou-001</a></li><li>进入仓库页面后，依旧是点击 Clone or download 按钮，由于我们没有登录 Github 所以这里能复制URL的只有 Use HTTPS 选项，与 Use ssh 选项的区别是每一次同步改动都需要手动输入 Github 的用户名和密码，加上因为是在线环境环境，为了安全性这里也应该就只用 HTTPS 来克隆仓库到本地</li><li>接下来打开终端，依旧用 git clone 命令克隆仓库到在线环境中，比如我的仓库地址是 <a href="https://github.com/shiyanlou-001/shiyanlou-001.git，" target="_blank" rel="noopener">https://github.com/shiyanlou-001/shiyanlou-001.git，</a> 那么命令就应该是下面这样子——如图所示<br>![实验楼](<a href="https://dn-simplecloud.shiyanlou.com/8395611541661550970-wm" target="_blank" rel="noopener">https://dn-simplecloud.shiyanlou.com/8395611541661550970-wm</a></li><li>查看是否拷贝成功——命令如图所示<br><img src="https://dn-simplecloud.shiyanlou.com/8395611541662009307-wm" alt="实验楼"></li></ul><h3 id="C、提交仓库的改动"><a href="#C、提交仓库的改动" class="headerlink" title="C、提交仓库的改动"></a>C、提交仓库的改动</h3><ul><li>在仓库的每一次改动操作之后，推送同步到远程仓库之前，都需要对这一次或这一批次的操作做提交，命令为 git commit，用法是 git commit -m “你的提交备注”，只有做好提交动作，才可以开始推送改动到远程仓库同步</li><li>因为我之前已经撤销了仓库的改动，这里就重新创建一个新的文件，内容就写“测试”两个字，然后提交改动.</li></ul><h3 id="D、推送改动到远程仓库中"><a href="#D、推送改动到远程仓库中" class="headerlink" title="D、推送改动到远程仓库中"></a>D、推送改动到远程仓库中</h3><ul><li>当我们提交了仓库的改动后，就可以开始推送改动的内容到远程仓库了，可以使用 git push 命令来推送，用法是 git push [-u] origin &lt;分支名&gt;，分支名默认是 master 具体步骤如下</li><li>第一次推送改动可以使用 -u 参数，使用之后会绑定你这一次的仓库分支名，这样的话下一次推送就不需要加上分支名了，如图，使用之后回提示已经绑定好分支，而且因为我们是 HTTPS 协议方式来克隆的仓库，所以每一次同步操作都需要输入用户名和密码 </li><li>然后我们到远程仓库去看一下，可以发现这个文件已经推送上来了，并且对应的行会显示之前提交操作的备注</li></ul><h3 id="E、在新的实验环境中同步之前的实验文件"><a href="#E、在新的实验环境中同步之前的实验文件" class="headerlink" title="E、在新的实验环境中同步之前的实验文件"></a>E、在新的实验环境中同步之前的实验文件</h3><ul><li>之前的步骤我们已经同步好远程仓库了，现在我们把在线环境不保存并关闭，然后重新打开实验，理所当然的之前的实验文件都已经不存在了<br>然后我们依旧去自己的远程仓库地址，把仓库克隆到本地，可以看到之前实验的文件都在 </li></ul><h3 id="F、在本地个人计算机中同步在线环境中的进度"><a href="#F、在本地个人计算机中同步在线环境中的进度" class="headerlink" title="F、在本地个人计算机中同步在线环境中的进度"></a>F、在本地个人计算机中同步在线环境中的进度</h3><ul><li>为了方便我们离开在线环境之后在个人机器上做实验，我们可以在最开始的个人机器的本地仓库中同步远程仓库的更新下来<ul><li>查看仓库改动<ul><li>首先我们可以通过 git fetch 命令查看有哪一些新改动，用法是在仓库目录下敲入 git fetch origin </li></ul></li><li>下拉仓库同步<ul><li>确认好更新的内容后，下一步就是把更新给同步到本地仓库中了，通过 git pull 命令来实现，具体用法是 git pull origin &lt;分支名&gt;，分支名默认是 master，再查看一下目录，可以看到已经同步好了 </li></ul></li></ul></li></ul><hr><h2 id="三、补充与总结"><a href="#三、补充与总结" class="headerlink" title="三、补充与总结"></a>三、补充与总结</h2><ul><li><strong>cat new.txt</strong></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、创建远程仓库&quot;&gt;&lt;a href=&quot;#一、创建远程仓库&quot; class=&quot;headerlink&quot; title=&quot;一、创建远程仓库&quot;&gt;&lt;/a&gt;一、创建远程仓库&lt;/h2&gt;&lt;hr&gt;
&lt;h3 id=&quot;A、SSH公私钥的使用&quot;&gt;&lt;a href=&quot;#A、SSH公私钥的使用&quot; 
      
    
    </summary>
    
      <category term="Github" scheme="www.rqwolverine.com/categories/Github/"/>
    
      <category term="Git" scheme="www.rqwolverine.com/categories/Github/Git/"/>
    
    
      <category term="git" scheme="www.rqwolverine.com/tags/git/"/>
    
      <category term="github" scheme="www.rqwolverine.com/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>Vim高级功能</title>
    <link href="www.rqwolverine.com/Vim%E9%AB%98%E7%BA%A7%E5%8A%9F%E8%83%BD.html"/>
    <id>www.rqwolverine.com/Vim高级功能.html</id>
    <published>2018-12-21T06:53:40.384Z</published>
    <updated>2018-12-21T06:54:53.405Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、多文件编辑"><a href="#一、多文件编辑" class="headerlink" title="一、多文件编辑"></a>一、多文件编辑</h2><h3 id="A、使用vim编辑多个文件"><a href="#A、使用vim编辑多个文件" class="headerlink" title="A、使用vim编辑多个文件"></a>A、使用vim编辑多个文件</h3><ul><li><p>编辑多个文件有两种形式<br> 1.一种是在进入vim前使用的参数就是多个文件<br> 2.另一种就是进入vim后再编辑其他的文件。 同时创建两个新文件并编辑</p></li><li><p>默认进入1.txt文件的编辑界面<br> 1.命令行模式下输入 :n 编辑 2.txt 文件，可以加 ! 即 :n! 强制切换，之前一个文件的输入没有保存，仅仅切换到另一个文件<br> 2.命令行模式下输入 :N 编辑 1.txt 文件，可以加 ! 即 :N! 强制切换，之前文件内的输入没有保存，仅仅是切换到另一个文件</p></li></ul><hr><h3 id="B、进入vim后打开新文件"><a href="#B、进入vim后打开新文件" class="headerlink" title="B、进入vim后打开新文件"></a>B、进入vim后打开新文件</h3><ul><li>命令行模式下输入:e 3.txt 打开新文件3.txt</li><li>命令行模式下输入:e# 回到前一个文件</li><li>命令行模式下输入:ls可以列出以前编辑过的文档</li><li>命令行模式下输入:b 2.txt（或者编号）可以直接进入文件2.txt编辑</li><li>命令行模式下输入:bd 2.txt（或者编号）可以删除以前编辑过的列表中的文件项目</li><li>命令行模式下输入:e! 4.txt，新打开文件4.txt，放弃正在编辑的文件</li><li>命令行模式下输入:f 显示正在编辑的文件名</li><li>命令行模式下输入:f new.txt，改变正在编辑的文件名字为new.txt</li></ul><hr><h3 id="C、恢复文件"><a href="#C、恢复文件" class="headerlink" title="C、恢复文件"></a>C、恢复文件</h3><ul><li>如果因为断电等原因造成文档没有保存，可以采用恢复方式，vim -r进入文档后，输入:ewcover 1.txt来恢复<ul><li><strong>备注：此处有简写，vim -r 后面加上“文件名”“.”“格式名”</strong></li></ul></li></ul><hr><h2 id="二、可视模式"><a href="#二、可视模式" class="headerlink" title="二、可视模式"></a>二、可视模式</h2><h3 id="可视模式命令如下"><a href="#可视模式命令如下" class="headerlink" title="可视模式命令如下"></a>可视模式命令如下</h3><ul><li>在普通模式下输入 v（小写），进入字符选择模式，就可以移动光标，光标走过的地方就会选取。再次按下v后就会取消选取</li><li>在普通模式下输入 Shift+v（小写），进入行选择模式，按下V之后就会把整行选取，您可以上下移动光标选更多的行，同样，再按一次 Shift+v 就可以取消选取</li><li>在普通模式下输入 Ctrl+v（小写），这是区域选择模式，可以进行矩形区域选择，再按一次 Ctrl+v 取消选取</li><li>在可视模式下输入 d 删除选取区域内容</li><li>在可视模式下输入y复制选取区域内容</li></ul><hr><h2 id="三、视窗操作"><a href="#三、视窗操作" class="headerlink" title="三、视窗操作"></a>三、视窗操作</h2><ul><li><strong>简介:</strong>  vim 可以在一个界面里打开多个窗口进行编辑，这些编辑窗口称为 vim 的视窗。 打开方法有很多种，例如可以使用在命令行模式下输入 :new 打开一个新的 vim 视窗，并进入视窗编辑一个新文件（普通模式下输入 Ctrl+w也可以），除了 :new 命令，下述列举的多种方法也可以在命令模式或普通模式下打开新的视窗：<ul><li>命令行模式下输入:sp 1.txt 打开新的水平分屏视窗来编辑1.txt</li><li>命令行模式下输入:vsp 2.txt 打开新的垂直分屏视窗来编辑2.txt<br>*普通模式下Ctrl+w s 将当前窗口分割成两个水平的窗口</li><li>普通模式下Ctrl+w v 将当前窗口分割成两个垂直的窗口</li><li>普通模式下Ctrl+w q 即 :q 结束分割出来的视窗。如果在新视窗中有输入需要使用强制符！即:q!</li><li>普通模式下Ctrl+w o 打开一个视窗并且隐藏之前的所有视窗</li><li>普通模式下Ctrl+w j 移至下面视窗</li><li>普通模式下Ctrl+w k 移至上面视窗</li><li>普通模式下Ctrl+w h 移至左边视窗</li><li>普通模式下Ctrl+w l 移至右边视窗</li><li>普通模式下Ctrl+w J 将当前视窗移至下面</li><li>普通模式下Ctrl+w K 将当前视窗移至上面</li><li>普通模式下Ctrl+w H 将当前视窗移至左边</li><li>普通模式下Ctrl+w L 将当前视窗移至右边</li><li>普通模式下Ctrl+w - 减小视窗的高度</li><li>普通模式下Ctrl+w + 增加视窗的高度</li></ul></li></ul><hr><h2 id="四、文档加密"><a href="#四、文档加密" class="headerlink" title="四、文档加密"></a>四、文档加密</h2><ul><li><strong>使用命令  vim -x file1</strong></li></ul><hr><h2 id="五、在vim执行外部命令"><a href="#五、在vim执行外部命令" class="headerlink" title="五、在vim执行外部命令"></a>五、在vim执行外部命令</h2><p><strong>在命令行模式中输入!可以执行外部的shell命令</strong></p><ul><li>:!ls 用于显示当前目录的内容</li><li>:!rm FILENAME用于删除名为 FILENAME 的文件</li><li>:w FILENAME可将当前 VIM 中正在编辑的文件另存为 FILENAME 文件</li></ul><hr><h2 id="六、帮助系统"><a href="#六、帮助系统" class="headerlink" title="六、帮助系统"></a>六、帮助系统</h2><ul><li>普通模式下按F1打开vim自己预设的帮助文档</li><li>命令行模式下输入:h shiftwidth 打开名为shiftwidth的帮助文件</li><li>命令行模式下输入:ver 显示版本及参数</li></ul><hr><h2 id="七、功能设定"><a href="#七、功能设定" class="headerlink" title="七、功能设定"></a>七、功能设定</h2><h3 id="A、vim的功能设定"><a href="#A、vim的功能设定" class="headerlink" title="A、vim的功能设定"></a>A、vim的功能设定</h3><ul><li>可以在编辑文件的时候进行功能设定，如命令行模式下输入:set nu（显示行数），设定值退出vim后不会保存。要永久保存配置需要修改vim配置文件。</li><li><strong>vim的配置文件~/.vimrc(实验楼环境中配置文件在/etc/vim/vimrc)，可以打开文件进行修改，不过务必小心不要影响vim正常使用</strong></li></ul><h3 id="B、获取目前的设定"><a href="#B、获取目前的设定" class="headerlink" title="B、获取目前的设定"></a>B、获取目前的设定</h3><ul><li>命令行模式下输入:set或者:se显示所有修改过的配置</li><li>命令行模式下输入:set all 显示所有的设定值</li><li>命令行模式下输入:set option? 显示option的设定值</li><li>命令行模式下输入:set nooption 取消当前设定值</li></ul><h3 id="C、set功能的说明"><a href="#C、set功能的说明" class="headerlink" title="C、set功能的说明"></a>C、set功能的说明</h3><ul><li>命令行模式下输入:set autoindent(ai) 设置自动缩进</li><li>命令行模式下输入:set autowrite(aw) 设置自动存档，默认未打开</li><li>命令行模式下输入:set background=dark或light，设置背景风格</li><li>命令行模式下输入:set backup(bk) 设置自动备份，默认未打开</li><li>命令行模式下输入: set cindent(cin) 设置C语言风格缩进</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、多文件编辑&quot;&gt;&lt;a href=&quot;#一、多文件编辑&quot; class=&quot;headerlink&quot; title=&quot;一、多文件编辑&quot;&gt;&lt;/a&gt;一、多文件编辑&lt;/h2&gt;&lt;h3 id=&quot;A、使用vim编辑多个文件&quot;&gt;&lt;a href=&quot;#A、使用vim编辑多个文件&quot; class
      
    
    </summary>
    
      <category term="Ubuntu" scheme="www.rqwolverine.com/categories/Ubuntu/"/>
    
      <category term="Vim" scheme="www.rqwolverine.com/categories/Ubuntu/Vim/"/>
    
    
      <category term="Linux" scheme="www.rqwolverine.com/tags/Linux/"/>
    
      <category term="vim" scheme="www.rqwolverine.com/tags/vim/"/>
    
  </entry>
  
  <entry>
    <title>Vim文档编辑</title>
    <link href="www.rqwolverine.com/Vim%E6%9F%A5%E6%89%BE%E6%9B%BF%E6%8D%A2.html"/>
    <id>www.rqwolverine.com/Vim查找替换.html</id>
    <published>2018-12-21T06:46:45.258Z</published>
    <updated>2018-12-21T06:55:21.269Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、字符的替换以及撤销（Undo操作）"><a href="#一、字符的替换以及撤销（Undo操作）" class="headerlink" title="一、字符的替换以及撤销（Undo操作）"></a>一、字符的替换以及撤销（Undo操作）</h2><p><strong>注意！！！替换和Undo命令都是针对普通模式下的操作</strong></p><h3 id="A、替换和撤销-Undo-命令"><a href="#A、替换和撤销-Undo-命令" class="headerlink" title="A、替换和撤销(Undo)命令"></a>A、替换和撤销(Undo)命令</h3><p><strong>仅针对于普通模式</strong></p><table><thead><tr><th style="text-align:center">Command</th><th style="text-align:center">Instruction</th></tr></thead><tbody><tr><td style="text-align:center">r+&lt;待替换字母&gt;</td><td style="text-align:center">将游标所在字母替换为指定字母</td></tr><tr><td style="text-align:center">R</td><td style="text-align:center">连续替换，直到按下Esc</td></tr><tr><td style="text-align:center">cc</td><td style="text-align:center">替换整行，即删除游标所在行，并进入插入模式</td></tr><tr><td style="text-align:center">cw</td><td style="text-align:center">替换一个单词，即删除一个单词，并进入插入模式</td></tr><tr><td style="text-align:center">C(大写)</td><td style="text-align:center">替换游标以后至行末</td></tr><tr><td style="text-align:center">~</td><td style="text-align:center">反转游标所在字母大小写</td></tr><tr><td style="text-align:center">u{n}</td><td style="text-align:center">撤销一次或n次操作</td></tr><tr><td style="text-align:center">U(大写)</td><td style="text-align:center">撤销当前行的所有修改</td></tr><tr><td style="text-align:center">Ctrl+r</td><td style="text-align:center">redo，即撤销undo的操作</td></tr></tbody></table><hr><ul><li>Usage Guide<ul><li>输入fa 跳转到第一个a字符</li><li>输入r，并且输入b，a字符被b字符替换（实用）</li><li>输入R替换字符，输入新字符串，输入完按ESC回到普通模式（实用）</li><li>输入cc替换整行字符，输入新字符串，输入完按ESC回到普通模式</li><li>输入cw 替换一个英文字(word)，输入完按ESC回到普通模式（实用）</li><li>输入~，翻转游标所在字符的大小写</li><li>输入C 替换至行尾，即游标所在处以后的字都会被替换，输入完按ESC回到普通模式</li><li>输入u 撤销上一次的操作</li></ul></li></ul><hr><h2 id="二、快速缩进（均在普通模式下有效）"><a href="#二、快速缩进（均在普通模式下有效）" class="headerlink" title="二、快速缩进（均在普通模式下有效）"></a>二、快速缩进（均在普通模式下有效）</h2><h3 id="A、"><a href="#A、" class="headerlink" title="A、"></a>A、</h3><ul><li>普通模式下输入15G，跳转到15行</li><li>普通模式下输入&gt;&gt; 整行将向右缩进（使用，用于格式化代码超爽）</li><li>普通模式下输入&lt;&lt; 整行向左回退</li><li>普通模式下输入:进入命令行模式下对shiftwidth值进行设置可以控制缩进和回退的字符数</li></ul><h3 id="B、"><a href="#B、" class="headerlink" title="B、"></a>B、</h3><ul><li>shiftwidth命令:是指上一节&gt;&gt;命令产生的缩进（可以简写成sw） 普通模式下输入:进入命令行模式下对shiftwidth值进行设置可以控制缩进和回退的字符数 获取目前的设定值</li><li>操作方法：  :set shiftwidth=x   x为缩进字符数，设定结束后按Esc返回普通模式</li><li>命令行模式下输入    :ce(center)命令使本行内容居中</li><li>命令行模式下输入    :ri(right)命令使本行文本靠右</li><li>命令行模式下输入    :le(left)命令使本行内容靠左</li></ul><hr><h2 id="三、查找"><a href="#三、查找" class="headerlink" title="三、查找"></a>三、查找</h2><h3 id="A、快速查找"><a href="#A、快速查找" class="headerlink" title="A、快速查找"></a>A、快速查找</h3><ul><li>普通模式下输入 / 然后键入需要查找的字符串 按回车后就会进行查找。</li><li>？与/ 功能相同，只不过 ？ 是向上而 / 是向下查找。 进入查找之后，输入n 和 N 可以继续查找 n表示继续查找，N 反向查找<ul><li>操作方式：普通模式下输入/icmp然后回车即可查找字符串 icmp     </li><li>普通模式下输入n查找下一个 icmp     </li><li>普通模式下输入？tcp向上查找字符串 tcp     </li><li>普通模式下输入N查找上一个出现的 tcp     </li><li>命令行模式下输入 noh 然后回车即可取消搜索)</li></ul></li></ul><h3 id="B、高级查找"><a href="#B、高级查找" class="headerlink" title="B、高级查找"></a>B、高级查找</h3><ul><li>普通模式下输入*寻找游标所在处的单词</li><li>普通模式下输入#同上，但 # 是向前（上）找，*则是向后（下）找</li><li>普通模式下输入g*同* ，但部分符合该单词即可</li><li>普通模式下输入g#同# ，但部分符合该单词即可</li><li>以上查找n,N 的继续查找命令依然可以用</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、字符的替换以及撤销（Undo操作）&quot;&gt;&lt;a href=&quot;#一、字符的替换以及撤销（Undo操作）&quot; class=&quot;headerlink&quot; title=&quot;一、字符的替换以及撤销（Undo操作）&quot;&gt;&lt;/a&gt;一、字符的替换以及撤销（Undo操作）&lt;/h2&gt;&lt;p&gt;&lt;s
      
    
    </summary>
    
      <category term="Ubuntu" scheme="www.rqwolverine.com/categories/Ubuntu/"/>
    
      <category term="Vim" scheme="www.rqwolverine.com/categories/Ubuntu/Vim/"/>
    
    
      <category term="Linux" scheme="www.rqwolverine.com/tags/Linux/"/>
    
      <category term="vim" scheme="www.rqwolverine.com/tags/vim/"/>
    
  </entry>
  
  <entry>
    <title>Vim文档编辑</title>
    <link href="www.rqwolverine.com/Vim%E6%96%87%E6%A1%A3%E7%BC%96%E8%BE%91.html"/>
    <id>www.rqwolverine.com/Vim文档编辑.html</id>
    <published>2018-12-21T06:33:04.577Z</published>
    <updated>2018-12-21T06:55:15.914Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、vim重复命令"><a href="#一、vim重复命令" class="headerlink" title="一、vim重复命令"></a>一、vim重复命令</h2><h3 id="A、重复执行上次命令"><a href="#A、重复执行上次命令" class="headerlink" title="A、重复执行上次命令"></a>A、重复执行上次命令</h3><p>1、在<strong>普通模式</strong>下:  .(小数点)表示重复上一次的命令操作<br>2、<strong>普通模式</strong>下输入x，删除第一个字符，输入.(小数点)会再次删除一个字符，除此之外也可以重复dd的删除操作</p><hr><h3 id="B、执行指定次数相同的命令"><a href="#B、执行指定次数相同的命令" class="headerlink" title="B、执行指定次数相同的命令"></a>B、执行指定次数相同的命令</h3><ul><li><strong>普通模式</strong>下，使用dw或者daw(delete a word)删除一个单词</li><li>而dnw(n替换为相应数字) 表示删除n个单词</li></ul><hr><h3 id="C、游标的快速跳转"><a href="#C、游标的快速跳转" class="headerlink" title="C、游标的快速跳转"></a>C、游标的快速跳转</h3><h4 id="a、行间跳转"><a href="#a、行间跳转" class="headerlink" title="a、行间跳转"></a>a、行间跳转</h4><table><thead><tr><th style="text-align:left">Command</th><th style="text-align:left">Instruction</th></tr></thead><tbody><tr><td style="text-align:left">nG(n Shift+g)</td><td style="text-align:left">游标移动到第 n 行(如果默认没有显示行号，请先进入命令模式，输入:set nu以显示行号)</td></tr><tr><td style="text-align:left">gg</td><td style="text-align:left">游标移动到到第一行</td></tr><tr><td style="text-align:left">G(Shift+g)</td><td style="text-align:left">到最后一行</td></tr></tbody></table><p><strong>Tips</strong>:在完成依次跳转后，可以使用 Ctrl+o 快速回到上一次(跳转前)光标所在位置</p><hr><h4 id="b、行内跳转"><a href="#b、行内跳转" class="headerlink" title="b、行内跳转"></a>b、行内跳转</h4><table><thead><tr><th style="text-align:left">命令</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">w</td><td style="text-align:left">到下一个单词的开头</td></tr><tr><td style="text-align:left">e</td><td style="text-align:left">到当前单词的结尾</td></tr><tr><td style="text-align:left">b</td><td style="text-align:left">到前一个单词的开头</td></tr><tr><td style="text-align:left">ge</td><td style="text-align:left">到前一个单词的结尾</td></tr><tr><td style="text-align:left">0或^</td><td style="text-align:left">到行头</td></tr><tr><td style="text-align:left">$</td><td style="text-align:left">到行尾</td></tr><tr><td style="text-align:left">f&lt;字母&gt;</td><td style="text-align:left">向后搜索&lt;字母&gt;并跳转到第一个匹配的位置(非常实用)</td></tr><tr><td style="text-align:left">F&lt;字母&gt;</td><td style="text-align:left">向前搜索&lt;字母&gt;并跳转到第一个匹配的位置</td></tr><tr><td style="text-align:left">t&lt;字母&gt;</td><td style="text-align:left">向后搜索&lt;字母&gt;并跳转到第一个匹配位置之前的一个字母(不常用)</td></tr><tr><td style="text-align:left">T&lt;字母&gt;</td><td style="text-align:left">向前搜索&lt;字母&gt;并跳转到第一个匹配位置之后的一个字母(不常用)</td></tr></tbody></table><hr><h4 id="c、复制及粘贴文本"><a href="#c、复制及粘贴文本" class="headerlink" title="c、复制及粘贴文本"></a>c、复制及粘贴文本</h4><ul><li>普通模式中使用y复制<ul><li>普通模式中，yy复制游标所在的整行（3yy表示复制3行）</li><li>普通模式中，y^ 复制至行首，或y0。不含光标所在处字符。</li><li>普通模式中，y$ 复制至行尾。含光标所在处字符。</li><li>普通模式中，yw 复制一个单词。</li><li>普通模式中，y2w 复制两个单词。</li><li>普通模式中，yG 复制至文本末。</li><li>普通模式中，y1G 复制至文本开头。</li></ul></li><li>普通模式中使用 p 粘贴<ul><li>普通模式中，p(小写)代表粘贴至光标后（下）</li><li>普通模式中，P(大写)代表粘贴至光标前（上）</li></ul></li></ul><h4 id="d、剪切及粘贴"><a href="#d、剪切及粘贴" class="headerlink" title="d、剪切及粘贴"></a>d、剪切及粘贴</h4><ul><li>dd 删除命令就是剪切，每次 dd 删除文档内容后，便可以使用 p 来粘贴</li><li>交换上下行：ddp ,就这么简单，即实现了快速交换光标所在行与它下面的行</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、vim重复命令&quot;&gt;&lt;a href=&quot;#一、vim重复命令&quot; class=&quot;headerlink&quot; title=&quot;一、vim重复命令&quot;&gt;&lt;/a&gt;一、vim重复命令&lt;/h2&gt;&lt;h3 id=&quot;A、重复执行上次命令&quot;&gt;&lt;a href=&quot;#A、重复执行上次命令&quot; cla
      
    
    </summary>
    
      <category term="Ubuntu" scheme="www.rqwolverine.com/categories/Ubuntu/"/>
    
      <category term="Vim" scheme="www.rqwolverine.com/categories/Ubuntu/Vim/"/>
    
    
      <category term="Linux" scheme="www.rqwolverine.com/tags/Linux/"/>
    
      <category term="vim" scheme="www.rqwolverine.com/tags/vim/"/>
    
  </entry>
  
  <entry>
    <title>Vim基本介绍</title>
    <link href="www.rqwolverine.com/Vim%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%BB%8D.html"/>
    <id>www.rqwolverine.com/Vim基本介绍.html</id>
    <published>2018-12-21T06:14:26.156Z</published>
    <updated>2018-12-21T06:55:11.046Z</updated>
    
    <content type="html"><![CDATA[<h2 id="A、Vim的特点"><a href="#A、Vim的特点" class="headerlink" title="A、Vim的特点"></a>A、Vim的特点</h2><ul><li>Vim和vi一样，仅仅通过键盘来在这些模式之中切换。这就使得Vim可以不用进行菜单或者鼠标操作，并且最小化组合键的操作。对文字录入员或者程序员可以大大增强速度和效率</li></ul><hr><h2 id="B、Vim的六种基本模式"><a href="#B、Vim的六种基本模式" class="headerlink" title="B、Vim的六种基本模式"></a>B、Vim的六种基本模式</h2><h3 id="a、普通模式-Normal-mode"><a href="#a、普通模式-Normal-mode" class="headerlink" title="a、普通模式(Normal mode)"></a>a、普通模式(Normal mode)</h3><ul><li>在普通模式中，用的编辑器命令，比如移动光标，删除文本等等。这也是Vim启动后的默认模式。这正好和许多新用户期待的操作方式相反（大多数编辑器默认模式为插入模式）。</li><li>Vim强大的编辑能来自于其普通模式命令。普通模式命令往往需要一个操作符结尾。例如普通模式命令dd删除当前行，但是第一个”d”的后面可以跟另外的移动命令来代替第二个d，比如用移动到下一行的”j”键就可以删除当前行和下一行。另外还可以指定命令重复次数，2dd（重复dd两次），和dj的效果是一样的。用户学习了各种各样的文本间移动／跳转的命令和其他的普通模式的编辑命令，并且能够灵活组合使用的话，能够比那些没有模式的编辑器更加高效地进行文本编辑。</li><li>在普通模式中，有很多方法可以进入插入模式。比较普通的方式是按a（append／追加）键或者i（insert／插入）键。</li></ul><h3 id="b、插入模式-Insert-mode"><a href="#b、插入模式-Insert-mode" class="headerlink" title="b、插入模式(Insert mode)"></a>b、插入模式(Insert mode)</h3><ul><li>在这个模式中，大多数按键都会向文本缓冲中插入文本。大多数新用户希望文本编辑器编辑过程中一直保持这个模式。</li><li>在插入模式中，可以按ESC键回到普通模式。</li></ul><h3 id="c、可视模式-Visual-mode"><a href="#c、可视模式-Visual-mode" class="headerlink" title="c、可视模式(Visual mode)"></a>c、可视模式(Visual mode)</h3><ul><li>这个模式与普通模式比较相似。但是移动命令会扩大高亮的文本区域。高亮区域可以是字符、行或者是一块文本。当执行一个非移动命令时，命令会被执行到这块高亮的区域上。Vim的”文本对象”也能和移动命令一样用在这个模式中。</li></ul><h3 id="d、选择模式-Select-mode"><a href="#d、选择模式-Select-mode" class="headerlink" title="d、选择模式(Select mode)"></a>d、选择模式(Select mode)</h3><ul><li>这个模式和无模式编辑器的行为比较相似（Windows标准文本控件的方式）。这个模式中，可以用鼠标或者光标键高亮选择文本，不过输入任何字符的话，Vim会用这个字符替换选择的高亮文本块，并且自动进入插入模式</li></ul><h3 id="e、命令行模式-Command-line-mode"><a href="#e、命令行模式-Command-line-mode" class="headerlink" title="e、命令行模式(Command line mode)"></a>e、命令行模式(Command line mode)</h3><ul><li>在命令行模式中可以输入会被解释成并执行的文本。例如执行命令（:键），搜索（/和?键）或者过滤命令（!键）。在命令执行之后，Vim返回到命令行模式之前的模式，通常是普通模式</li></ul><h3 id="f、Ex模式-Ex-mode"><a href="#f、Ex模式-Ex-mode" class="headerlink" title="f、Ex模式(Ex mode)"></a>f、Ex模式(Ex mode)</h3><ul><li>这和命令行模式比较相似，在使用:visual命令离开Ex模式前，可以一次执行多条命令</li></ul><hr><h2 id="C、Vim各种模式的快速切换"><a href="#C、Vim各种模式的快速切换" class="headerlink" title="C、Vim各种模式的快速切换"></a>C、Vim各种模式的快速切换</h2><ul><li>vim启动进入普通模式</li><li>处于插入模式或命令行模式时只需要按Esc或者Ctrl+[(这在vim课程环境中不管用)即可进入普通模式。</li><li>普通模式中按i（插入）或a（附加）键都可以进入插入模式</li><li>普通模式中按:进入命令行模式</li><li>命令行模式中输入wq回车后保存并退出vim</li></ul><hr><h2 id="D、进入Vim"><a href="#D、进入Vim" class="headerlink" title="D、进入Vim"></a>D、进入Vim</h2><ul><li>vim后面加上你要打开的已存在的文件名或者不存在（则作为新建文件）的文件名。 （文件名： 名字.扩展名）</li><li>进入命令行模式后输入:e 文件路径 同样可以打开相应文件。<ul><li><strong>备注：光标移动：在普通模式下，w表示移动到下一个单词，b表示移动到上一个单词,h左移，l右移，j下移，k上移</strong></li></ul></li></ul><hr><h2 id="E、多元化进入插入模式"><a href="#E、多元化进入插入模式" class="headerlink" title="E、多元化进入插入模式"></a>E、多元化进入插入模式</h2><ul><li>i—-在当前光标处进行编辑</li><li>I—-在行首插入</li><li>A—-在行末插入</li><li>a—-在光标后插入编辑</li><li>o—-在当前行后插入一个新行</li><li>O—-在当前行前插入一个新行</li><li>cw—-替换从光标所在位置后到一个单词结尾的字符</li></ul><hr><h2 id="F、保存文档"><a href="#F、保存文档" class="headerlink" title="F、保存文档"></a>F、保存文档</h2><ul><li>命令行模式下保存文档<ul><li>从普通模式输入:进入命令行模式，输入w回车，保存文档。输入:w 文件名可以将文档另存为其他文件名或存到其它路径下</li></ul></li></ul><h2 id="G、退出Vim"><a href="#G、退出Vim" class="headerlink" title="G、退出Vim"></a>G、退出Vim</h2><ul><li>1、命令模式下退出Vim<ul><li>从普通模式输入:进入命令行模式，输入wq回车，保存并退出编辑</li></ul></li><li>2、其他退出方式<ul><li>:q!—-强制退出，不保存</li><li>:q—-退出</li><li>:wq!—-强制保存并退出</li><li>:w &lt;文件路径&gt;—-另存为</li><li>:saveas 文件路径—-另存为</li><li>:x—-保存并退出</li><li>:wq—-保存并退出</li></ul></li><li>3、普通模式退出Vim<ul><li>普通模式下输入Shift+zz即可保存退出vim</li></ul></li></ul><hr><h2 id="H、删除文本"><a href="#H、删除文本" class="headerlink" title="H、删除文本"></a>H、删除文本</h2><ul><li><p>进入普通模式，使用下列命令可以进行文本快速删除：</p><ul><li>x—-删除游标所在的字符</li><li>X—-删除游标所在前一个字符</li><li>Delete—-同x</li><li>dd—-删除整行</li><li>dw—-删除一个单词（不适用中文）</li><li>d$或D—-删除至行尾</li><li>d^—-删除至行首</li><li>dG—-删除到文档结尾处</li><li>d1G—-删至文档首部</li></ul></li><li><p><strong>除此之外，你还可以在命令之前加上数字，表示一次删除多行</strong></p><ul><li>如：2dd表示一次删除2行</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;A、Vim的特点&quot;&gt;&lt;a href=&quot;#A、Vim的特点&quot; class=&quot;headerlink&quot; title=&quot;A、Vim的特点&quot;&gt;&lt;/a&gt;A、Vim的特点&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Vim和vi一样，仅仅通过键盘来在这些模式之中切换。这就使得Vim可以不用进行菜
      
    
    </summary>
    
      <category term="Ubuntu" scheme="www.rqwolverine.com/categories/Ubuntu/"/>
    
      <category term="Vim" scheme="www.rqwolverine.com/categories/Ubuntu/Vim/"/>
    
    
      <category term="Linux" scheme="www.rqwolverine.com/tags/Linux/"/>
    
      <category term="vim" scheme="www.rqwolverine.com/tags/vim/"/>
    
  </entry>
  
  <entry>
    <title>Windows10·操作系统触控板使用（原创）</title>
    <link href="www.rqwolverine.com/Windows10%C2%B7%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E8%A7%A6%E6%8E%A7%E6%9D%BF%E4%BD%BF%E7%94%A8%EF%BC%88%E5%8E%9F%E5%88%9B%EF%BC%89.html"/>
    <id>www.rqwolverine.com/Windows10·操作系统触控板使用（原创）.html</id>
    <published>2018-12-16T09:09:50.298Z</published>
    <updated>2018-12-18T11:15:11.339Z</updated>
    
    <content type="html"><![CDATA[<p><font face="微软雅黑" color="grey" size="5"><strong>A、导语</strong></font></p><ul><li><font face="华文中宋" size="3" color="black">Windows操作系统不像Linux操作系统，Ubuntu支持多个工作区，你可以将事件分类后分配到多个工作区从而实现快速切换，然而Windows并不支持。</font></li><li><font face="华文中宋" size="3" color="black">Windows操作系统与Linux相比实质上有很多不便，Linux可以允许用户方便地对快捷键操作进行自定义，也可以使用终端代替图形界面。</font></li><li><font face="华文中宋" size="3" color="black">每个人都想用便捷高效的方式完成办公等日常操作，不得不说，如果能够用好Windows系统下的触控板的话，个人认为会比鼠标操作更为快速，此文基于此简要介绍几个Windows操作系统触控板的常用功能。</font></li></ul><hr><p><font face="微软雅黑" color="grey" size="5"><strong>B、介绍</strong></font></p><ul><li><font face="华文中宋" size="3" color="black">1、实现鼠标右键功能：两指同时触碰触控板后离开即可</font></li><li><font face="华文中宋" size="3" color="black">2、实现滑动浏览：两指同时轻放在触控板上，前后拖动即可</font></li><li><font face="华文中宋" size="3" color="black">3、实现鼠标定点双击（如打开文件）：单指快速轻触触控板两次</font></li><li><font face="华文中宋" size="3" color="black">4、实现文件拖动、拽引：单指快速轻触触控板两次，第二次接触后不要离开触控板，直接拖动至目标地点</font></li><li><font face="华文中宋" size="3" color="black">5、唤醒Windows内嵌查找框：三指同时快速轻触触控板一次后离开触控板</font></li><li><font face="华文中宋" size="3" color="black">6、唤醒Windows通知栏：四指同时快速轻触触控板一次后离开触控板<ul><li><font face="华文中宋" size="2.5" color="brown">备注：通知栏通常包括网络连接、模式切换、移动网络连接、飞行模式、vpn等功能图标</font></li></ul></font></li><li><font face="华文中宋" size="3" color="black">7、查看历史操作记录&amp;已打开页面切换：三指同时接触触控板后向上划动即可进入历史记录查看区和页面切换区<ul><li><font face="华文中宋" size="2.5" color="brown">备注：该区域可以查看过去30天的所有页面打开记录，也可以<strong>新建桌面</strong>，但是浏览器历史查询只能看到<strong>Microsoft Edge</strong>的，其余浏览器历史记录不会显示</font></li></ul></font></li><li><font face="华文中宋" size="3" color="black">8、快速对已打开页面执行切换：三指同时接触触控板（三指并排水平），然后向右侧拖拽便可以看见已打开的页面，通过轻微的方向曳引使白色框出现在你即将切换到的页面，即可实现快速切屏。<ul><li><font face="华文中宋" size="2.5" color="brown">备注：这个方式在打开页面较多或者较少时会比鼠标快捷得多，因为你可以看到你打开<strong>每个应用的名字</strong>，尤其是切换<strong>磁盘或文件夹</strong>时极其快捷</font></li></ul></font></li><li><font face="华文中宋" size="3" color="black">9、快速清屏：三指水平排列轻触触控板后向下滑动，即可将当前在工作区视图的软件全部最小化</font></li><li><font face="华文中宋" size="3" color="black">10、清屏恢复：在执行快速清屏后如果没有进行其他页面打开操作的话，三指水平排列轻触触控板后向上滑动，即可将刚才最小化的页面复原至工作区视图</font></li></ul><hr><p><font face="微软雅黑" color="grey" size="5"><strong>C、结语</strong></font></p><p><font face="华文中宋" size="3" color="black">外出若是携带笔记本电脑，若是还要再背上一个鼠标，有时会是一件挺麻烦的事，触控板可以完美地实现鼠标可以实现的所有功能，甚至有过之而无不及，但是并不建议用触控板玩LOL哈哈哈哈。</font></p><p><font face="华文中宋" size="3" color="black">最后愿此文能对你有所帮助~~</font></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;font face=&quot;微软雅黑&quot; color=&quot;grey&quot; size=&quot;5&quot;&gt;&lt;strong&gt;A、导语&lt;/strong&gt;&lt;/font&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;font face=&quot;华文中宋&quot; size=&quot;3&quot; color=&quot;black&quot;&gt;Windows操作系统不像L
      
    
    </summary>
    
      <category term="Windows" scheme="www.rqwolverine.com/categories/Windows/"/>
    
    
      <category term="Windows" scheme="www.rqwolverine.com/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>Windows10·Ping命令报错解决（原创）</title>
    <link href="www.rqwolverine.com/%5BWindows10%5DPing%E5%91%BD%E4%BB%A4%EF%BC%88%E5%8E%9F%E5%88%9B%EF%BC%89%20(1).html"/>
    <id>www.rqwolverine.com/[Windows10]Ping命令（原创） (1).html</id>
    <published>2018-12-14T14:14:25.370Z</published>
    <updated>2018-12-18T11:14:51.039Z</updated>
    
    <content type="html"><![CDATA[<p><font face="微软雅黑" color="grey" size="5"><strong>A、导语</strong></font></p><ul><li><font face="华文中宋" size="3" color="black">Ping是Windows、Unix和Linux系统下的一个命令。ping也属于一个通信协议，是TCP/IP协议的一部分。利用“ping”命令可以检查网络是否连通，可以很好地帮助我们分析和判定网络故障。<ul><li><font face="华文中宋" size="2.5" color="black">应用格式：Ping空格IP地址。</font></li></ul></font></li><li><font face="华文中宋" size="3" color="black">Ping命令亦可以根据网页解析其IP地址，而以下将以IP地址解析为例给出Windows系统三种可能情况下的处理方案。<ul><li><font face="华文中宋" size="2.5" color="black">测试通过机器：Windows10 64位 CORE i7</font></li></ul></font></li></ul><hr><p><font face="微软雅黑" color="grey" size="5"><strong>B、情形I</strong></font></p><ul><li><font face="华文中宋" size="3" color="black">1.进入Windows10命令行模式：Win+R,键入cmd，回车</font></li><li><font face="华文中宋" size="3" color="black"> 2.直接输入命令： Ping+空格+网址，回车即可<ul><li><font face="华文中宋" size="2.5" color="black">若是显示“ping不是内部或外部命令，也不是可运行的程序”，说明有可能需要进行环境变量的配置</font></li></ul></font></li></ul><hr><p><font face="微软雅黑" color="grey" size="5"><strong>C、情形II</strong></font></p><ul><li><font face="华文中宋" size="3" color="black"> 1.右键单击“此电脑”，选择“属性”，选择“高级系统设置”</font></li><li><font face="华文中宋" size="3" color="black"> 2.选择“环境变量”，进入后查看“系统变量（S）”</font></li><li><font face="华文中宋" size="3" color="black"> 3.找到系统变量中的“Path”，进入对Path的编辑框</font></li><li><font face="华文中宋" size="3" color="black"> 4.在目录末尾添加“\System32”，保存并退出</font></li><li><font face="华文中宋" size="3" color="black"> 5.Win+R，cmd</font></li><li><font face="华文中宋" size="3" color="black"> 6.执行Ping命令即可<ul><li><font face="华文中宋" size="2.5" color="black"> 若仍然显示“ping不是内部或外部命令，也不是可运行的程序”，那么你可能就要考虑使用情况III的解决方案啦！</font></li></ul></font></li></ul><hr><p><font face="微软雅黑" color="grey" size="5"><strong>D、情形IV</strong></font></p><ul><li><font face="华文中宋" size="3" color="black"> 1.首先你得完成情形III的配置工作，注意一定不要出错~</font></li><li><font face="华文中宋" size="3" color="black"> 2.进入Windows命令行模式，键入“cd\”，回车</font></li><li><font face="华文中宋" size="3" color="black"> 3.键入“cd windows\system32”,回车</font></li><li><font face="华文中宋" size="3" color="black"> 4.键入Ping+空格+网址，回车</font></li><li><font face="华文中宋" size="3" color="black"> 5.大功告成~~</font></li></ul><hr><p><font face="微软雅黑" color="grey" size="5"><strong>E、结尾语</strong><br> <font face="华文中宋" size="3" color="black">Ping命令功能非常强大，该文章只是能够基本确保解决执行Ping命令时的报错的问题，至于其更为强大的应用和功能，我会在未来技术精进的过程中逐步推送~</font></font></p><p><font face="华文中宋" size="3" color="black"> 晚安，四级加油/捂脸//捂脸//捂脸/</font></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;font face=&quot;微软雅黑&quot; color=&quot;grey&quot; size=&quot;5&quot;&gt;&lt;strong&gt;A、导语&lt;/strong&gt;&lt;/font&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;font face=&quot;华文中宋&quot; size=&quot;3&quot; color=&quot;black&quot;&gt;Ping是Windows、U
      
    
    </summary>
    
      <category term="Windows" scheme="www.rqwolverine.com/categories/Windows/"/>
    
    
      <category term="Windows" scheme="www.rqwolverine.com/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="www.rqwolverine.com/hello-world.html"/>
    <id>www.rqwolverine.com/hello-world.html</id>
    <published>2018-12-14T05:47:18.415Z</published>
    <updated>2018-12-18T11:14:57.635Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
      <category term="others" scheme="www.rqwolverine.com/categories/others/"/>
    
    
      <category term="others" scheme="www.rqwolverine.com/tags/others/"/>
    
      <category term="IandYou" scheme="www.rqwolverine.com/tags/IandYou/"/>
    
  </entry>
  
</feed>
